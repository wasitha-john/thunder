// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package authnmock

import (
	"github.com/asgardeo/thunder/internal/authn"
	"github.com/asgardeo/thunder/internal/authn/common"
	"github.com/asgardeo/thunder/internal/idp"
	common0 "github.com/asgardeo/thunder/internal/notification/common"
	"github.com/asgardeo/thunder/internal/system/error/serviceerror"
	mock "github.com/stretchr/testify/mock"
)

// NewAuthenticationServiceInterfaceMock creates a new instance of AuthenticationServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthenticationServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthenticationServiceInterfaceMock {
	mock := &AuthenticationServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthenticationServiceInterfaceMock is an autogenerated mock type for the AuthenticationServiceInterface type
type AuthenticationServiceInterfaceMock struct {
	mock.Mock
}

type AuthenticationServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthenticationServiceInterfaceMock) EXPECT() *AuthenticationServiceInterfaceMock_Expecter {
	return &AuthenticationServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// AuthenticateWithCredentials provides a mock function for the type AuthenticationServiceInterfaceMock
func (_mock *AuthenticationServiceInterfaceMock) AuthenticateWithCredentials(attributes map[string]interface{}, skipAssertion bool) (*common.AuthenticationResponse, *serviceerror.ServiceError) {
	ret := _mock.Called(attributes, skipAssertion)

	if len(ret) == 0 {
		panic("no return value specified for AuthenticateWithCredentials")
	}

	var r0 *common.AuthenticationResponse
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}, bool) (*common.AuthenticationResponse, *serviceerror.ServiceError)); ok {
		return returnFunc(attributes, skipAssertion)
	}
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}, bool) *common.AuthenticationResponse); ok {
		r0 = returnFunc(attributes, skipAssertion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.AuthenticationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(map[string]interface{}, bool) *serviceerror.ServiceError); ok {
		r1 = returnFunc(attributes, skipAssertion)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// AuthenticationServiceInterfaceMock_AuthenticateWithCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticateWithCredentials'
type AuthenticationServiceInterfaceMock_AuthenticateWithCredentials_Call struct {
	*mock.Call
}

// AuthenticateWithCredentials is a helper method to define mock.On call
//   - attributes map[string]interface{}
//   - skipAssertion bool
func (_e *AuthenticationServiceInterfaceMock_Expecter) AuthenticateWithCredentials(attributes interface{}, skipAssertion interface{}) *AuthenticationServiceInterfaceMock_AuthenticateWithCredentials_Call {
	return &AuthenticationServiceInterfaceMock_AuthenticateWithCredentials_Call{Call: _e.mock.On("AuthenticateWithCredentials", attributes, skipAssertion)}
}

func (_c *AuthenticationServiceInterfaceMock_AuthenticateWithCredentials_Call) Run(run func(attributes map[string]interface{}, skipAssertion bool)) *AuthenticationServiceInterfaceMock_AuthenticateWithCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]interface{}
		if args[0] != nil {
			arg0 = args[0].(map[string]interface{})
		}
		var arg1 bool
		if args[1] != nil {
			arg1 = args[1].(bool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthenticationServiceInterfaceMock_AuthenticateWithCredentials_Call) Return(authenticationResponse *common.AuthenticationResponse, serviceError *serviceerror.ServiceError) *AuthenticationServiceInterfaceMock_AuthenticateWithCredentials_Call {
	_c.Call.Return(authenticationResponse, serviceError)
	return _c
}

func (_c *AuthenticationServiceInterfaceMock_AuthenticateWithCredentials_Call) RunAndReturn(run func(attributes map[string]interface{}, skipAssertion bool) (*common.AuthenticationResponse, *serviceerror.ServiceError)) *AuthenticationServiceInterfaceMock_AuthenticateWithCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// FinishIDPAuthentication provides a mock function for the type AuthenticationServiceInterfaceMock
func (_mock *AuthenticationServiceInterfaceMock) FinishIDPAuthentication(requestedType idp.IDPType, sessionToken string, skipAssertion bool, code string) (*common.AuthenticationResponse, *serviceerror.ServiceError) {
	ret := _mock.Called(requestedType, sessionToken, skipAssertion, code)

	if len(ret) == 0 {
		panic("no return value specified for FinishIDPAuthentication")
	}

	var r0 *common.AuthenticationResponse
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(idp.IDPType, string, bool, string) (*common.AuthenticationResponse, *serviceerror.ServiceError)); ok {
		return returnFunc(requestedType, sessionToken, skipAssertion, code)
	}
	if returnFunc, ok := ret.Get(0).(func(idp.IDPType, string, bool, string) *common.AuthenticationResponse); ok {
		r0 = returnFunc(requestedType, sessionToken, skipAssertion, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.AuthenticationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(idp.IDPType, string, bool, string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(requestedType, sessionToken, skipAssertion, code)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// AuthenticationServiceInterfaceMock_FinishIDPAuthentication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishIDPAuthentication'
type AuthenticationServiceInterfaceMock_FinishIDPAuthentication_Call struct {
	*mock.Call
}

// FinishIDPAuthentication is a helper method to define mock.On call
//   - requestedType idp.IDPType
//   - sessionToken string
//   - skipAssertion bool
//   - code string
func (_e *AuthenticationServiceInterfaceMock_Expecter) FinishIDPAuthentication(requestedType interface{}, sessionToken interface{}, skipAssertion interface{}, code interface{}) *AuthenticationServiceInterfaceMock_FinishIDPAuthentication_Call {
	return &AuthenticationServiceInterfaceMock_FinishIDPAuthentication_Call{Call: _e.mock.On("FinishIDPAuthentication", requestedType, sessionToken, skipAssertion, code)}
}

func (_c *AuthenticationServiceInterfaceMock_FinishIDPAuthentication_Call) Run(run func(requestedType idp.IDPType, sessionToken string, skipAssertion bool, code string)) *AuthenticationServiceInterfaceMock_FinishIDPAuthentication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 idp.IDPType
		if args[0] != nil {
			arg0 = args[0].(idp.IDPType)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *AuthenticationServiceInterfaceMock_FinishIDPAuthentication_Call) Return(authenticationResponse *common.AuthenticationResponse, serviceError *serviceerror.ServiceError) *AuthenticationServiceInterfaceMock_FinishIDPAuthentication_Call {
	_c.Call.Return(authenticationResponse, serviceError)
	return _c
}

func (_c *AuthenticationServiceInterfaceMock_FinishIDPAuthentication_Call) RunAndReturn(run func(requestedType idp.IDPType, sessionToken string, skipAssertion bool, code string) (*common.AuthenticationResponse, *serviceerror.ServiceError)) *AuthenticationServiceInterfaceMock_FinishIDPAuthentication_Call {
	_c.Call.Return(run)
	return _c
}

// SendOTP provides a mock function for the type AuthenticationServiceInterfaceMock
func (_mock *AuthenticationServiceInterfaceMock) SendOTP(senderID string, channel common0.ChannelType, recipient string) (string, *serviceerror.ServiceError) {
	ret := _mock.Called(senderID, channel, recipient)

	if len(ret) == 0 {
		panic("no return value specified for SendOTP")
	}

	var r0 string
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, common0.ChannelType, string) (string, *serviceerror.ServiceError)); ok {
		return returnFunc(senderID, channel, recipient)
	}
	if returnFunc, ok := ret.Get(0).(func(string, common0.ChannelType, string) string); ok {
		r0 = returnFunc(senderID, channel, recipient)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, common0.ChannelType, string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(senderID, channel, recipient)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// AuthenticationServiceInterfaceMock_SendOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendOTP'
type AuthenticationServiceInterfaceMock_SendOTP_Call struct {
	*mock.Call
}

// SendOTP is a helper method to define mock.On call
//   - senderID string
//   - channel common0.ChannelType
//   - recipient string
func (_e *AuthenticationServiceInterfaceMock_Expecter) SendOTP(senderID interface{}, channel interface{}, recipient interface{}) *AuthenticationServiceInterfaceMock_SendOTP_Call {
	return &AuthenticationServiceInterfaceMock_SendOTP_Call{Call: _e.mock.On("SendOTP", senderID, channel, recipient)}
}

func (_c *AuthenticationServiceInterfaceMock_SendOTP_Call) Run(run func(senderID string, channel common0.ChannelType, recipient string)) *AuthenticationServiceInterfaceMock_SendOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 common0.ChannelType
		if args[1] != nil {
			arg1 = args[1].(common0.ChannelType)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AuthenticationServiceInterfaceMock_SendOTP_Call) Return(s string, serviceError *serviceerror.ServiceError) *AuthenticationServiceInterfaceMock_SendOTP_Call {
	_c.Call.Return(s, serviceError)
	return _c
}

func (_c *AuthenticationServiceInterfaceMock_SendOTP_Call) RunAndReturn(run func(senderID string, channel common0.ChannelType, recipient string) (string, *serviceerror.ServiceError)) *AuthenticationServiceInterfaceMock_SendOTP_Call {
	_c.Call.Return(run)
	return _c
}

// StartIDPAuthentication provides a mock function for the type AuthenticationServiceInterfaceMock
func (_mock *AuthenticationServiceInterfaceMock) StartIDPAuthentication(requestedType idp.IDPType, idpID string) (*authn.IDPAuthInitData, *serviceerror.ServiceError) {
	ret := _mock.Called(requestedType, idpID)

	if len(ret) == 0 {
		panic("no return value specified for StartIDPAuthentication")
	}

	var r0 *authn.IDPAuthInitData
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(idp.IDPType, string) (*authn.IDPAuthInitData, *serviceerror.ServiceError)); ok {
		return returnFunc(requestedType, idpID)
	}
	if returnFunc, ok := ret.Get(0).(func(idp.IDPType, string) *authn.IDPAuthInitData); ok {
		r0 = returnFunc(requestedType, idpID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authn.IDPAuthInitData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(idp.IDPType, string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(requestedType, idpID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// AuthenticationServiceInterfaceMock_StartIDPAuthentication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartIDPAuthentication'
type AuthenticationServiceInterfaceMock_StartIDPAuthentication_Call struct {
	*mock.Call
}

// StartIDPAuthentication is a helper method to define mock.On call
//   - requestedType idp.IDPType
//   - idpID string
func (_e *AuthenticationServiceInterfaceMock_Expecter) StartIDPAuthentication(requestedType interface{}, idpID interface{}) *AuthenticationServiceInterfaceMock_StartIDPAuthentication_Call {
	return &AuthenticationServiceInterfaceMock_StartIDPAuthentication_Call{Call: _e.mock.On("StartIDPAuthentication", requestedType, idpID)}
}

func (_c *AuthenticationServiceInterfaceMock_StartIDPAuthentication_Call) Run(run func(requestedType idp.IDPType, idpID string)) *AuthenticationServiceInterfaceMock_StartIDPAuthentication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 idp.IDPType
		if args[0] != nil {
			arg0 = args[0].(idp.IDPType)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthenticationServiceInterfaceMock_StartIDPAuthentication_Call) Return(iDPAuthInitData *authn.IDPAuthInitData, serviceError *serviceerror.ServiceError) *AuthenticationServiceInterfaceMock_StartIDPAuthentication_Call {
	_c.Call.Return(iDPAuthInitData, serviceError)
	return _c
}

func (_c *AuthenticationServiceInterfaceMock_StartIDPAuthentication_Call) RunAndReturn(run func(requestedType idp.IDPType, idpID string) (*authn.IDPAuthInitData, *serviceerror.ServiceError)) *AuthenticationServiceInterfaceMock_StartIDPAuthentication_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyOTP provides a mock function for the type AuthenticationServiceInterfaceMock
func (_mock *AuthenticationServiceInterfaceMock) VerifyOTP(sessionToken string, skipAssertion bool, otp string) (*common.AuthenticationResponse, *serviceerror.ServiceError) {
	ret := _mock.Called(sessionToken, skipAssertion, otp)

	if len(ret) == 0 {
		panic("no return value specified for VerifyOTP")
	}

	var r0 *common.AuthenticationResponse
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, bool, string) (*common.AuthenticationResponse, *serviceerror.ServiceError)); ok {
		return returnFunc(sessionToken, skipAssertion, otp)
	}
	if returnFunc, ok := ret.Get(0).(func(string, bool, string) *common.AuthenticationResponse); ok {
		r0 = returnFunc(sessionToken, skipAssertion, otp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.AuthenticationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, bool, string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(sessionToken, skipAssertion, otp)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// AuthenticationServiceInterfaceMock_VerifyOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyOTP'
type AuthenticationServiceInterfaceMock_VerifyOTP_Call struct {
	*mock.Call
}

// VerifyOTP is a helper method to define mock.On call
//   - sessionToken string
//   - skipAssertion bool
//   - otp string
func (_e *AuthenticationServiceInterfaceMock_Expecter) VerifyOTP(sessionToken interface{}, skipAssertion interface{}, otp interface{}) *AuthenticationServiceInterfaceMock_VerifyOTP_Call {
	return &AuthenticationServiceInterfaceMock_VerifyOTP_Call{Call: _e.mock.On("VerifyOTP", sessionToken, skipAssertion, otp)}
}

func (_c *AuthenticationServiceInterfaceMock_VerifyOTP_Call) Run(run func(sessionToken string, skipAssertion bool, otp string)) *AuthenticationServiceInterfaceMock_VerifyOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 bool
		if args[1] != nil {
			arg1 = args[1].(bool)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AuthenticationServiceInterfaceMock_VerifyOTP_Call) Return(authenticationResponse *common.AuthenticationResponse, serviceError *serviceerror.ServiceError) *AuthenticationServiceInterfaceMock_VerifyOTP_Call {
	_c.Call.Return(authenticationResponse, serviceError)
	return _c
}

func (_c *AuthenticationServiceInterfaceMock_VerifyOTP_Call) RunAndReturn(run func(sessionToken string, skipAssertion bool, otp string) (*common.AuthenticationResponse, *serviceerror.ServiceError)) *AuthenticationServiceInterfaceMock_VerifyOTP_Call {
	_c.Call.Return(run)
	return _c
}
