// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package oidcmock

import (
	"github.com/asgardeo/thunder/internal/authn/oauth"
	"github.com/asgardeo/thunder/internal/system/error/serviceerror"
	"github.com/asgardeo/thunder/internal/user"
	mock "github.com/stretchr/testify/mock"
)

// NewOIDCAuthnServiceInterfaceMock creates a new instance of OIDCAuthnServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOIDCAuthnServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OIDCAuthnServiceInterfaceMock {
	mock := &OIDCAuthnServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// OIDCAuthnServiceInterfaceMock is an autogenerated mock type for the OIDCAuthnServiceInterface type
type OIDCAuthnServiceInterfaceMock struct {
	mock.Mock
}

type OIDCAuthnServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OIDCAuthnServiceInterfaceMock) EXPECT() *OIDCAuthnServiceInterfaceMock_Expecter {
	return &OIDCAuthnServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// BuildAuthorizeURL provides a mock function for the type OIDCAuthnServiceInterfaceMock
func (_mock *OIDCAuthnServiceInterfaceMock) BuildAuthorizeURL(idpID string) (string, *serviceerror.ServiceError) {
	ret := _mock.Called(idpID)

	if len(ret) == 0 {
		panic("no return value specified for BuildAuthorizeURL")
	}

	var r0 string
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (string, *serviceerror.ServiceError)); ok {
		return returnFunc(idpID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(idpID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(idpID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OIDCAuthnServiceInterfaceMock_BuildAuthorizeURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildAuthorizeURL'
type OIDCAuthnServiceInterfaceMock_BuildAuthorizeURL_Call struct {
	*mock.Call
}

// BuildAuthorizeURL is a helper method to define mock.On call
//   - idpID string
func (_e *OIDCAuthnServiceInterfaceMock_Expecter) BuildAuthorizeURL(idpID interface{}) *OIDCAuthnServiceInterfaceMock_BuildAuthorizeURL_Call {
	return &OIDCAuthnServiceInterfaceMock_BuildAuthorizeURL_Call{Call: _e.mock.On("BuildAuthorizeURL", idpID)}
}

func (_c *OIDCAuthnServiceInterfaceMock_BuildAuthorizeURL_Call) Run(run func(idpID string)) *OIDCAuthnServiceInterfaceMock_BuildAuthorizeURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OIDCAuthnServiceInterfaceMock_BuildAuthorizeURL_Call) Return(s string, serviceError *serviceerror.ServiceError) *OIDCAuthnServiceInterfaceMock_BuildAuthorizeURL_Call {
	_c.Call.Return(s, serviceError)
	return _c
}

func (_c *OIDCAuthnServiceInterfaceMock_BuildAuthorizeURL_Call) RunAndReturn(run func(idpID string) (string, *serviceerror.ServiceError)) *OIDCAuthnServiceInterfaceMock_BuildAuthorizeURL_Call {
	_c.Call.Return(run)
	return _c
}

// ExchangeCodeForToken provides a mock function for the type OIDCAuthnServiceInterfaceMock
func (_mock *OIDCAuthnServiceInterfaceMock) ExchangeCodeForToken(idpID string, code string, validateResponse bool) (*oauth.TokenResponse, *serviceerror.ServiceError) {
	ret := _mock.Called(idpID, code, validateResponse)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeCodeForToken")
	}

	var r0 *oauth.TokenResponse
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, string, bool) (*oauth.TokenResponse, *serviceerror.ServiceError)); ok {
		return returnFunc(idpID, code, validateResponse)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, bool) *oauth.TokenResponse); ok {
		r0 = returnFunc(idpID, code, validateResponse)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth.TokenResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, bool) *serviceerror.ServiceError); ok {
		r1 = returnFunc(idpID, code, validateResponse)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OIDCAuthnServiceInterfaceMock_ExchangeCodeForToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeCodeForToken'
type OIDCAuthnServiceInterfaceMock_ExchangeCodeForToken_Call struct {
	*mock.Call
}

// ExchangeCodeForToken is a helper method to define mock.On call
//   - idpID string
//   - code string
//   - validateResponse bool
func (_e *OIDCAuthnServiceInterfaceMock_Expecter) ExchangeCodeForToken(idpID interface{}, code interface{}, validateResponse interface{}) *OIDCAuthnServiceInterfaceMock_ExchangeCodeForToken_Call {
	return &OIDCAuthnServiceInterfaceMock_ExchangeCodeForToken_Call{Call: _e.mock.On("ExchangeCodeForToken", idpID, code, validateResponse)}
}

func (_c *OIDCAuthnServiceInterfaceMock_ExchangeCodeForToken_Call) Run(run func(idpID string, code string, validateResponse bool)) *OIDCAuthnServiceInterfaceMock_ExchangeCodeForToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *OIDCAuthnServiceInterfaceMock_ExchangeCodeForToken_Call) Return(tokenResponse *oauth.TokenResponse, serviceError *serviceerror.ServiceError) *OIDCAuthnServiceInterfaceMock_ExchangeCodeForToken_Call {
	_c.Call.Return(tokenResponse, serviceError)
	return _c
}

func (_c *OIDCAuthnServiceInterfaceMock_ExchangeCodeForToken_Call) RunAndReturn(run func(idpID string, code string, validateResponse bool) (*oauth.TokenResponse, *serviceerror.ServiceError)) *OIDCAuthnServiceInterfaceMock_ExchangeCodeForToken_Call {
	_c.Call.Return(run)
	return _c
}

// FetchUserInfo provides a mock function for the type OIDCAuthnServiceInterfaceMock
func (_mock *OIDCAuthnServiceInterfaceMock) FetchUserInfo(idpID string, accessToken string) (map[string]interface{}, *serviceerror.ServiceError) {
	ret := _mock.Called(idpID, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for FetchUserInfo")
	}

	var r0 map[string]interface{}
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, string) (map[string]interface{}, *serviceerror.ServiceError)); ok {
		return returnFunc(idpID, accessToken)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) map[string]interface{}); ok {
		r0 = returnFunc(idpID, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(idpID, accessToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OIDCAuthnServiceInterfaceMock_FetchUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchUserInfo'
type OIDCAuthnServiceInterfaceMock_FetchUserInfo_Call struct {
	*mock.Call
}

// FetchUserInfo is a helper method to define mock.On call
//   - idpID string
//   - accessToken string
func (_e *OIDCAuthnServiceInterfaceMock_Expecter) FetchUserInfo(idpID interface{}, accessToken interface{}) *OIDCAuthnServiceInterfaceMock_FetchUserInfo_Call {
	return &OIDCAuthnServiceInterfaceMock_FetchUserInfo_Call{Call: _e.mock.On("FetchUserInfo", idpID, accessToken)}
}

func (_c *OIDCAuthnServiceInterfaceMock_FetchUserInfo_Call) Run(run func(idpID string, accessToken string)) *OIDCAuthnServiceInterfaceMock_FetchUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *OIDCAuthnServiceInterfaceMock_FetchUserInfo_Call) Return(stringToIfaceVal map[string]interface{}, serviceError *serviceerror.ServiceError) *OIDCAuthnServiceInterfaceMock_FetchUserInfo_Call {
	_c.Call.Return(stringToIfaceVal, serviceError)
	return _c
}

func (_c *OIDCAuthnServiceInterfaceMock_FetchUserInfo_Call) RunAndReturn(run func(idpID string, accessToken string) (map[string]interface{}, *serviceerror.ServiceError)) *OIDCAuthnServiceInterfaceMock_FetchUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetIDTokenClaims provides a mock function for the type OIDCAuthnServiceInterfaceMock
func (_mock *OIDCAuthnServiceInterfaceMock) GetIDTokenClaims(idToken string) (map[string]interface{}, *serviceerror.ServiceError) {
	ret := _mock.Called(idToken)

	if len(ret) == 0 {
		panic("no return value specified for GetIDTokenClaims")
	}

	var r0 map[string]interface{}
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (map[string]interface{}, *serviceerror.ServiceError)); ok {
		return returnFunc(idToken)
	}
	if returnFunc, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = returnFunc(idToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(idToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OIDCAuthnServiceInterfaceMock_GetIDTokenClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIDTokenClaims'
type OIDCAuthnServiceInterfaceMock_GetIDTokenClaims_Call struct {
	*mock.Call
}

// GetIDTokenClaims is a helper method to define mock.On call
//   - idToken string
func (_e *OIDCAuthnServiceInterfaceMock_Expecter) GetIDTokenClaims(idToken interface{}) *OIDCAuthnServiceInterfaceMock_GetIDTokenClaims_Call {
	return &OIDCAuthnServiceInterfaceMock_GetIDTokenClaims_Call{Call: _e.mock.On("GetIDTokenClaims", idToken)}
}

func (_c *OIDCAuthnServiceInterfaceMock_GetIDTokenClaims_Call) Run(run func(idToken string)) *OIDCAuthnServiceInterfaceMock_GetIDTokenClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OIDCAuthnServiceInterfaceMock_GetIDTokenClaims_Call) Return(stringToIfaceVal map[string]interface{}, serviceError *serviceerror.ServiceError) *OIDCAuthnServiceInterfaceMock_GetIDTokenClaims_Call {
	_c.Call.Return(stringToIfaceVal, serviceError)
	return _c
}

func (_c *OIDCAuthnServiceInterfaceMock_GetIDTokenClaims_Call) RunAndReturn(run func(idToken string) (map[string]interface{}, *serviceerror.ServiceError)) *OIDCAuthnServiceInterfaceMock_GetIDTokenClaims_Call {
	_c.Call.Return(run)
	return _c
}

// GetInternalUser provides a mock function for the type OIDCAuthnServiceInterfaceMock
func (_mock *OIDCAuthnServiceInterfaceMock) GetInternalUser(sub string) (*user.User, *serviceerror.ServiceError) {
	ret := _mock.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for GetInternalUser")
	}

	var r0 *user.User
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (*user.User, *serviceerror.ServiceError)); ok {
		return returnFunc(sub)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *user.User); ok {
		r0 = returnFunc(sub)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(sub)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OIDCAuthnServiceInterfaceMock_GetInternalUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInternalUser'
type OIDCAuthnServiceInterfaceMock_GetInternalUser_Call struct {
	*mock.Call
}

// GetInternalUser is a helper method to define mock.On call
//   - sub string
func (_e *OIDCAuthnServiceInterfaceMock_Expecter) GetInternalUser(sub interface{}) *OIDCAuthnServiceInterfaceMock_GetInternalUser_Call {
	return &OIDCAuthnServiceInterfaceMock_GetInternalUser_Call{Call: _e.mock.On("GetInternalUser", sub)}
}

func (_c *OIDCAuthnServiceInterfaceMock_GetInternalUser_Call) Run(run func(sub string)) *OIDCAuthnServiceInterfaceMock_GetInternalUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OIDCAuthnServiceInterfaceMock_GetInternalUser_Call) Return(user1 *user.User, serviceError *serviceerror.ServiceError) *OIDCAuthnServiceInterfaceMock_GetInternalUser_Call {
	_c.Call.Return(user1, serviceError)
	return _c
}

func (_c *OIDCAuthnServiceInterfaceMock_GetInternalUser_Call) RunAndReturn(run func(sub string) (*user.User, *serviceerror.ServiceError)) *OIDCAuthnServiceInterfaceMock_GetInternalUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetOAuthClientConfig provides a mock function for the type OIDCAuthnServiceInterfaceMock
func (_mock *OIDCAuthnServiceInterfaceMock) GetOAuthClientConfig(idpID string) (*oauth.OAuthClientConfig, *serviceerror.ServiceError) {
	ret := _mock.Called(idpID)

	if len(ret) == 0 {
		panic("no return value specified for GetOAuthClientConfig")
	}

	var r0 *oauth.OAuthClientConfig
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (*oauth.OAuthClientConfig, *serviceerror.ServiceError)); ok {
		return returnFunc(idpID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *oauth.OAuthClientConfig); ok {
		r0 = returnFunc(idpID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth.OAuthClientConfig)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(idpID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OIDCAuthnServiceInterfaceMock_GetOAuthClientConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOAuthClientConfig'
type OIDCAuthnServiceInterfaceMock_GetOAuthClientConfig_Call struct {
	*mock.Call
}

// GetOAuthClientConfig is a helper method to define mock.On call
//   - idpID string
func (_e *OIDCAuthnServiceInterfaceMock_Expecter) GetOAuthClientConfig(idpID interface{}) *OIDCAuthnServiceInterfaceMock_GetOAuthClientConfig_Call {
	return &OIDCAuthnServiceInterfaceMock_GetOAuthClientConfig_Call{Call: _e.mock.On("GetOAuthClientConfig", idpID)}
}

func (_c *OIDCAuthnServiceInterfaceMock_GetOAuthClientConfig_Call) Run(run func(idpID string)) *OIDCAuthnServiceInterfaceMock_GetOAuthClientConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OIDCAuthnServiceInterfaceMock_GetOAuthClientConfig_Call) Return(oAuthClientConfig *oauth.OAuthClientConfig, serviceError *serviceerror.ServiceError) *OIDCAuthnServiceInterfaceMock_GetOAuthClientConfig_Call {
	_c.Call.Return(oAuthClientConfig, serviceError)
	return _c
}

func (_c *OIDCAuthnServiceInterfaceMock_GetOAuthClientConfig_Call) RunAndReturn(run func(idpID string) (*oauth.OAuthClientConfig, *serviceerror.ServiceError)) *OIDCAuthnServiceInterfaceMock_GetOAuthClientConfig_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateIDToken provides a mock function for the type OIDCAuthnServiceInterfaceMock
func (_mock *OIDCAuthnServiceInterfaceMock) ValidateIDToken(idpID string, idToken string) *serviceerror.ServiceError {
	ret := _mock.Called(idpID, idToken)

	if len(ret) == 0 {
		panic("no return value specified for ValidateIDToken")
	}

	var r0 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, string) *serviceerror.ServiceError); ok {
		r0 = returnFunc(idpID, idToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serviceerror.ServiceError)
		}
	}
	return r0
}

// OIDCAuthnServiceInterfaceMock_ValidateIDToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateIDToken'
type OIDCAuthnServiceInterfaceMock_ValidateIDToken_Call struct {
	*mock.Call
}

// ValidateIDToken is a helper method to define mock.On call
//   - idpID string
//   - idToken string
func (_e *OIDCAuthnServiceInterfaceMock_Expecter) ValidateIDToken(idpID interface{}, idToken interface{}) *OIDCAuthnServiceInterfaceMock_ValidateIDToken_Call {
	return &OIDCAuthnServiceInterfaceMock_ValidateIDToken_Call{Call: _e.mock.On("ValidateIDToken", idpID, idToken)}
}

func (_c *OIDCAuthnServiceInterfaceMock_ValidateIDToken_Call) Run(run func(idpID string, idToken string)) *OIDCAuthnServiceInterfaceMock_ValidateIDToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *OIDCAuthnServiceInterfaceMock_ValidateIDToken_Call) Return(serviceError *serviceerror.ServiceError) *OIDCAuthnServiceInterfaceMock_ValidateIDToken_Call {
	_c.Call.Return(serviceError)
	return _c
}

func (_c *OIDCAuthnServiceInterfaceMock_ValidateIDToken_Call) RunAndReturn(run func(idpID string, idToken string) *serviceerror.ServiceError) *OIDCAuthnServiceInterfaceMock_ValidateIDToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTokenResponse provides a mock function for the type OIDCAuthnServiceInterfaceMock
func (_mock *OIDCAuthnServiceInterfaceMock) ValidateTokenResponse(idpID string, tokenResp *oauth.TokenResponse, validateIDToken bool) *serviceerror.ServiceError {
	ret := _mock.Called(idpID, tokenResp, validateIDToken)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTokenResponse")
	}

	var r0 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, *oauth.TokenResponse, bool) *serviceerror.ServiceError); ok {
		r0 = returnFunc(idpID, tokenResp, validateIDToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serviceerror.ServiceError)
		}
	}
	return r0
}

// OIDCAuthnServiceInterfaceMock_ValidateTokenResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTokenResponse'
type OIDCAuthnServiceInterfaceMock_ValidateTokenResponse_Call struct {
	*mock.Call
}

// ValidateTokenResponse is a helper method to define mock.On call
//   - idpID string
//   - tokenResp *oauth.TokenResponse
//   - validateIDToken bool
func (_e *OIDCAuthnServiceInterfaceMock_Expecter) ValidateTokenResponse(idpID interface{}, tokenResp interface{}, validateIDToken interface{}) *OIDCAuthnServiceInterfaceMock_ValidateTokenResponse_Call {
	return &OIDCAuthnServiceInterfaceMock_ValidateTokenResponse_Call{Call: _e.mock.On("ValidateTokenResponse", idpID, tokenResp, validateIDToken)}
}

func (_c *OIDCAuthnServiceInterfaceMock_ValidateTokenResponse_Call) Run(run func(idpID string, tokenResp *oauth.TokenResponse, validateIDToken bool)) *OIDCAuthnServiceInterfaceMock_ValidateTokenResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *oauth.TokenResponse
		if args[1] != nil {
			arg1 = args[1].(*oauth.TokenResponse)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *OIDCAuthnServiceInterfaceMock_ValidateTokenResponse_Call) Return(serviceError *serviceerror.ServiceError) *OIDCAuthnServiceInterfaceMock_ValidateTokenResponse_Call {
	_c.Call.Return(serviceError)
	return _c
}

func (_c *OIDCAuthnServiceInterfaceMock_ValidateTokenResponse_Call) RunAndReturn(run func(idpID string, tokenResp *oauth.TokenResponse, validateIDToken bool) *serviceerror.ServiceError) *OIDCAuthnServiceInterfaceMock_ValidateTokenResponse_Call {
	_c.Call.Return(run)
	return _c
}
