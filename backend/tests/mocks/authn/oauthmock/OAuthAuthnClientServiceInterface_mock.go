// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package oauthmock

import (
	"github.com/asgardeo/thunder/internal/authn/oauth"
	"github.com/asgardeo/thunder/internal/system/error/serviceerror"
	mock "github.com/stretchr/testify/mock"
)

// NewOAuthAuthnClientServiceInterfaceMock creates a new instance of OAuthAuthnClientServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOAuthAuthnClientServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OAuthAuthnClientServiceInterfaceMock {
	mock := &OAuthAuthnClientServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// OAuthAuthnClientServiceInterfaceMock is an autogenerated mock type for the OAuthAuthnClientServiceInterface type
type OAuthAuthnClientServiceInterfaceMock struct {
	mock.Mock
}

type OAuthAuthnClientServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OAuthAuthnClientServiceInterfaceMock) EXPECT() *OAuthAuthnClientServiceInterfaceMock_Expecter {
	return &OAuthAuthnClientServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// GetOAuthClientConfig provides a mock function for the type OAuthAuthnClientServiceInterfaceMock
func (_mock *OAuthAuthnClientServiceInterfaceMock) GetOAuthClientConfig(idpID string) (*oauth.OAuthClientConfig, *serviceerror.ServiceError) {
	ret := _mock.Called(idpID)

	if len(ret) == 0 {
		panic("no return value specified for GetOAuthClientConfig")
	}

	var r0 *oauth.OAuthClientConfig
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (*oauth.OAuthClientConfig, *serviceerror.ServiceError)); ok {
		return returnFunc(idpID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *oauth.OAuthClientConfig); ok {
		r0 = returnFunc(idpID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth.OAuthClientConfig)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(idpID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OAuthAuthnClientServiceInterfaceMock_GetOAuthClientConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOAuthClientConfig'
type OAuthAuthnClientServiceInterfaceMock_GetOAuthClientConfig_Call struct {
	*mock.Call
}

// GetOAuthClientConfig is a helper method to define mock.On call
//   - idpID string
func (_e *OAuthAuthnClientServiceInterfaceMock_Expecter) GetOAuthClientConfig(idpID interface{}) *OAuthAuthnClientServiceInterfaceMock_GetOAuthClientConfig_Call {
	return &OAuthAuthnClientServiceInterfaceMock_GetOAuthClientConfig_Call{Call: _e.mock.On("GetOAuthClientConfig", idpID)}
}

func (_c *OAuthAuthnClientServiceInterfaceMock_GetOAuthClientConfig_Call) Run(run func(idpID string)) *OAuthAuthnClientServiceInterfaceMock_GetOAuthClientConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OAuthAuthnClientServiceInterfaceMock_GetOAuthClientConfig_Call) Return(oAuthClientConfig *oauth.OAuthClientConfig, serviceError *serviceerror.ServiceError) *OAuthAuthnClientServiceInterfaceMock_GetOAuthClientConfig_Call {
	_c.Call.Return(oAuthClientConfig, serviceError)
	return _c
}

func (_c *OAuthAuthnClientServiceInterfaceMock_GetOAuthClientConfig_Call) RunAndReturn(run func(idpID string) (*oauth.OAuthClientConfig, *serviceerror.ServiceError)) *OAuthAuthnClientServiceInterfaceMock_GetOAuthClientConfig_Call {
	_c.Call.Return(run)
	return _c
}
