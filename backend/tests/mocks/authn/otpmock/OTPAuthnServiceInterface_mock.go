// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package otpmock

import (
	"github.com/asgardeo/thunder/internal/notification/common"
	"github.com/asgardeo/thunder/internal/system/error/serviceerror"
	"github.com/asgardeo/thunder/internal/user"
	mock "github.com/stretchr/testify/mock"
)

// NewOTPAuthnServiceInterfaceMock creates a new instance of OTPAuthnServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOTPAuthnServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OTPAuthnServiceInterfaceMock {
	mock := &OTPAuthnServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// OTPAuthnServiceInterfaceMock is an autogenerated mock type for the OTPAuthnServiceInterface type
type OTPAuthnServiceInterfaceMock struct {
	mock.Mock
}

type OTPAuthnServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OTPAuthnServiceInterfaceMock) EXPECT() *OTPAuthnServiceInterfaceMock_Expecter {
	return &OTPAuthnServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// SendOTP provides a mock function for the type OTPAuthnServiceInterfaceMock
func (_mock *OTPAuthnServiceInterfaceMock) SendOTP(senderID string, channel common.ChannelType, recipient string) (string, *serviceerror.ServiceError) {
	ret := _mock.Called(senderID, channel, recipient)

	if len(ret) == 0 {
		panic("no return value specified for SendOTP")
	}

	var r0 string
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, common.ChannelType, string) (string, *serviceerror.ServiceError)); ok {
		return returnFunc(senderID, channel, recipient)
	}
	if returnFunc, ok := ret.Get(0).(func(string, common.ChannelType, string) string); ok {
		r0 = returnFunc(senderID, channel, recipient)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, common.ChannelType, string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(senderID, channel, recipient)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OTPAuthnServiceInterfaceMock_SendOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendOTP'
type OTPAuthnServiceInterfaceMock_SendOTP_Call struct {
	*mock.Call
}

// SendOTP is a helper method to define mock.On call
//   - senderID string
//   - channel common.ChannelType
//   - recipient string
func (_e *OTPAuthnServiceInterfaceMock_Expecter) SendOTP(senderID interface{}, channel interface{}, recipient interface{}) *OTPAuthnServiceInterfaceMock_SendOTP_Call {
	return &OTPAuthnServiceInterfaceMock_SendOTP_Call{Call: _e.mock.On("SendOTP", senderID, channel, recipient)}
}

func (_c *OTPAuthnServiceInterfaceMock_SendOTP_Call) Run(run func(senderID string, channel common.ChannelType, recipient string)) *OTPAuthnServiceInterfaceMock_SendOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 common.ChannelType
		if args[1] != nil {
			arg1 = args[1].(common.ChannelType)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *OTPAuthnServiceInterfaceMock_SendOTP_Call) Return(s string, serviceError *serviceerror.ServiceError) *OTPAuthnServiceInterfaceMock_SendOTP_Call {
	_c.Call.Return(s, serviceError)
	return _c
}

func (_c *OTPAuthnServiceInterfaceMock_SendOTP_Call) RunAndReturn(run func(senderID string, channel common.ChannelType, recipient string) (string, *serviceerror.ServiceError)) *OTPAuthnServiceInterfaceMock_SendOTP_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyOTP provides a mock function for the type OTPAuthnServiceInterfaceMock
func (_mock *OTPAuthnServiceInterfaceMock) VerifyOTP(sessionToken string, otp string) (*user.User, *serviceerror.ServiceError) {
	ret := _mock.Called(sessionToken, otp)

	if len(ret) == 0 {
		panic("no return value specified for VerifyOTP")
	}

	var r0 *user.User
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, string) (*user.User, *serviceerror.ServiceError)); ok {
		return returnFunc(sessionToken, otp)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *user.User); ok {
		r0 = returnFunc(sessionToken, otp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(sessionToken, otp)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OTPAuthnServiceInterfaceMock_VerifyOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyOTP'
type OTPAuthnServiceInterfaceMock_VerifyOTP_Call struct {
	*mock.Call
}

// VerifyOTP is a helper method to define mock.On call
//   - sessionToken string
//   - otp string
func (_e *OTPAuthnServiceInterfaceMock_Expecter) VerifyOTP(sessionToken interface{}, otp interface{}) *OTPAuthnServiceInterfaceMock_VerifyOTP_Call {
	return &OTPAuthnServiceInterfaceMock_VerifyOTP_Call{Call: _e.mock.On("VerifyOTP", sessionToken, otp)}
}

func (_c *OTPAuthnServiceInterfaceMock_VerifyOTP_Call) Run(run func(sessionToken string, otp string)) *OTPAuthnServiceInterfaceMock_VerifyOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *OTPAuthnServiceInterfaceMock_VerifyOTP_Call) Return(user1 *user.User, serviceError *serviceerror.ServiceError) *OTPAuthnServiceInterfaceMock_VerifyOTP_Call {
	_c.Call.Return(user1, serviceError)
	return _c
}

func (_c *OTPAuthnServiceInterfaceMock_VerifyOTP_Call) RunAndReturn(run func(sessionToken string, otp string) (*user.User, *serviceerror.ServiceError)) *OTPAuthnServiceInterfaceMock_VerifyOTP_Call {
	_c.Call.Return(run)
	return _c
}
