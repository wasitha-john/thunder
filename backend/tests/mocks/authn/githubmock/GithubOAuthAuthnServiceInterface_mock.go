// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package githubmock

import (
	"github.com/asgardeo/thunder/internal/authn/oauth"
	"github.com/asgardeo/thunder/internal/system/error/serviceerror"
	"github.com/asgardeo/thunder/internal/user"
	mock "github.com/stretchr/testify/mock"
)

// NewGithubOAuthAuthnServiceInterfaceMock creates a new instance of GithubOAuthAuthnServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGithubOAuthAuthnServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *GithubOAuthAuthnServiceInterfaceMock {
	mock := &GithubOAuthAuthnServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GithubOAuthAuthnServiceInterfaceMock is an autogenerated mock type for the GithubOAuthAuthnServiceInterface type
type GithubOAuthAuthnServiceInterfaceMock struct {
	mock.Mock
}

type GithubOAuthAuthnServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *GithubOAuthAuthnServiceInterfaceMock) EXPECT() *GithubOAuthAuthnServiceInterfaceMock_Expecter {
	return &GithubOAuthAuthnServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// BuildAuthorizeURL provides a mock function for the type GithubOAuthAuthnServiceInterfaceMock
func (_mock *GithubOAuthAuthnServiceInterfaceMock) BuildAuthorizeURL(idpID string) (string, *serviceerror.ServiceError) {
	ret := _mock.Called(idpID)

	if len(ret) == 0 {
		panic("no return value specified for BuildAuthorizeURL")
	}

	var r0 string
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (string, *serviceerror.ServiceError)); ok {
		return returnFunc(idpID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(idpID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(idpID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// GithubOAuthAuthnServiceInterfaceMock_BuildAuthorizeURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildAuthorizeURL'
type GithubOAuthAuthnServiceInterfaceMock_BuildAuthorizeURL_Call struct {
	*mock.Call
}

// BuildAuthorizeURL is a helper method to define mock.On call
//   - idpID string
func (_e *GithubOAuthAuthnServiceInterfaceMock_Expecter) BuildAuthorizeURL(idpID interface{}) *GithubOAuthAuthnServiceInterfaceMock_BuildAuthorizeURL_Call {
	return &GithubOAuthAuthnServiceInterfaceMock_BuildAuthorizeURL_Call{Call: _e.mock.On("BuildAuthorizeURL", idpID)}
}

func (_c *GithubOAuthAuthnServiceInterfaceMock_BuildAuthorizeURL_Call) Run(run func(idpID string)) *GithubOAuthAuthnServiceInterfaceMock_BuildAuthorizeURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *GithubOAuthAuthnServiceInterfaceMock_BuildAuthorizeURL_Call) Return(s string, serviceError *serviceerror.ServiceError) *GithubOAuthAuthnServiceInterfaceMock_BuildAuthorizeURL_Call {
	_c.Call.Return(s, serviceError)
	return _c
}

func (_c *GithubOAuthAuthnServiceInterfaceMock_BuildAuthorizeURL_Call) RunAndReturn(run func(idpID string) (string, *serviceerror.ServiceError)) *GithubOAuthAuthnServiceInterfaceMock_BuildAuthorizeURL_Call {
	_c.Call.Return(run)
	return _c
}

// ExchangeCodeForToken provides a mock function for the type GithubOAuthAuthnServiceInterfaceMock
func (_mock *GithubOAuthAuthnServiceInterfaceMock) ExchangeCodeForToken(idpID string, code string, validateResponse bool) (*oauth.TokenResponse, *serviceerror.ServiceError) {
	ret := _mock.Called(idpID, code, validateResponse)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeCodeForToken")
	}

	var r0 *oauth.TokenResponse
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, string, bool) (*oauth.TokenResponse, *serviceerror.ServiceError)); ok {
		return returnFunc(idpID, code, validateResponse)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, bool) *oauth.TokenResponse); ok {
		r0 = returnFunc(idpID, code, validateResponse)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth.TokenResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, bool) *serviceerror.ServiceError); ok {
		r1 = returnFunc(idpID, code, validateResponse)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// GithubOAuthAuthnServiceInterfaceMock_ExchangeCodeForToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeCodeForToken'
type GithubOAuthAuthnServiceInterfaceMock_ExchangeCodeForToken_Call struct {
	*mock.Call
}

// ExchangeCodeForToken is a helper method to define mock.On call
//   - idpID string
//   - code string
//   - validateResponse bool
func (_e *GithubOAuthAuthnServiceInterfaceMock_Expecter) ExchangeCodeForToken(idpID interface{}, code interface{}, validateResponse interface{}) *GithubOAuthAuthnServiceInterfaceMock_ExchangeCodeForToken_Call {
	return &GithubOAuthAuthnServiceInterfaceMock_ExchangeCodeForToken_Call{Call: _e.mock.On("ExchangeCodeForToken", idpID, code, validateResponse)}
}

func (_c *GithubOAuthAuthnServiceInterfaceMock_ExchangeCodeForToken_Call) Run(run func(idpID string, code string, validateResponse bool)) *GithubOAuthAuthnServiceInterfaceMock_ExchangeCodeForToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GithubOAuthAuthnServiceInterfaceMock_ExchangeCodeForToken_Call) Return(tokenResponse *oauth.TokenResponse, serviceError *serviceerror.ServiceError) *GithubOAuthAuthnServiceInterfaceMock_ExchangeCodeForToken_Call {
	_c.Call.Return(tokenResponse, serviceError)
	return _c
}

func (_c *GithubOAuthAuthnServiceInterfaceMock_ExchangeCodeForToken_Call) RunAndReturn(run func(idpID string, code string, validateResponse bool) (*oauth.TokenResponse, *serviceerror.ServiceError)) *GithubOAuthAuthnServiceInterfaceMock_ExchangeCodeForToken_Call {
	_c.Call.Return(run)
	return _c
}

// FetchUserInfo provides a mock function for the type GithubOAuthAuthnServiceInterfaceMock
func (_mock *GithubOAuthAuthnServiceInterfaceMock) FetchUserInfo(idpID string, accessToken string) (map[string]interface{}, *serviceerror.ServiceError) {
	ret := _mock.Called(idpID, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for FetchUserInfo")
	}

	var r0 map[string]interface{}
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, string) (map[string]interface{}, *serviceerror.ServiceError)); ok {
		return returnFunc(idpID, accessToken)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) map[string]interface{}); ok {
		r0 = returnFunc(idpID, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(idpID, accessToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// GithubOAuthAuthnServiceInterfaceMock_FetchUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchUserInfo'
type GithubOAuthAuthnServiceInterfaceMock_FetchUserInfo_Call struct {
	*mock.Call
}

// FetchUserInfo is a helper method to define mock.On call
//   - idpID string
//   - accessToken string
func (_e *GithubOAuthAuthnServiceInterfaceMock_Expecter) FetchUserInfo(idpID interface{}, accessToken interface{}) *GithubOAuthAuthnServiceInterfaceMock_FetchUserInfo_Call {
	return &GithubOAuthAuthnServiceInterfaceMock_FetchUserInfo_Call{Call: _e.mock.On("FetchUserInfo", idpID, accessToken)}
}

func (_c *GithubOAuthAuthnServiceInterfaceMock_FetchUserInfo_Call) Run(run func(idpID string, accessToken string)) *GithubOAuthAuthnServiceInterfaceMock_FetchUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GithubOAuthAuthnServiceInterfaceMock_FetchUserInfo_Call) Return(stringToIfaceVal map[string]interface{}, serviceError *serviceerror.ServiceError) *GithubOAuthAuthnServiceInterfaceMock_FetchUserInfo_Call {
	_c.Call.Return(stringToIfaceVal, serviceError)
	return _c
}

func (_c *GithubOAuthAuthnServiceInterfaceMock_FetchUserInfo_Call) RunAndReturn(run func(idpID string, accessToken string) (map[string]interface{}, *serviceerror.ServiceError)) *GithubOAuthAuthnServiceInterfaceMock_FetchUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetInternalUser provides a mock function for the type GithubOAuthAuthnServiceInterfaceMock
func (_mock *GithubOAuthAuthnServiceInterfaceMock) GetInternalUser(sub string) (*user.User, *serviceerror.ServiceError) {
	ret := _mock.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for GetInternalUser")
	}

	var r0 *user.User
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (*user.User, *serviceerror.ServiceError)); ok {
		return returnFunc(sub)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *user.User); ok {
		r0 = returnFunc(sub)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(sub)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// GithubOAuthAuthnServiceInterfaceMock_GetInternalUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInternalUser'
type GithubOAuthAuthnServiceInterfaceMock_GetInternalUser_Call struct {
	*mock.Call
}

// GetInternalUser is a helper method to define mock.On call
//   - sub string
func (_e *GithubOAuthAuthnServiceInterfaceMock_Expecter) GetInternalUser(sub interface{}) *GithubOAuthAuthnServiceInterfaceMock_GetInternalUser_Call {
	return &GithubOAuthAuthnServiceInterfaceMock_GetInternalUser_Call{Call: _e.mock.On("GetInternalUser", sub)}
}

func (_c *GithubOAuthAuthnServiceInterfaceMock_GetInternalUser_Call) Run(run func(sub string)) *GithubOAuthAuthnServiceInterfaceMock_GetInternalUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *GithubOAuthAuthnServiceInterfaceMock_GetInternalUser_Call) Return(user1 *user.User, serviceError *serviceerror.ServiceError) *GithubOAuthAuthnServiceInterfaceMock_GetInternalUser_Call {
	_c.Call.Return(user1, serviceError)
	return _c
}

func (_c *GithubOAuthAuthnServiceInterfaceMock_GetInternalUser_Call) RunAndReturn(run func(sub string) (*user.User, *serviceerror.ServiceError)) *GithubOAuthAuthnServiceInterfaceMock_GetInternalUser_Call {
	_c.Call.Return(run)
	return _c
}
