// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package httpmock

import (
	"io"
	"net/http"
	"net/url"

	mock "github.com/stretchr/testify/mock"
)

// NewHTTPClientInterfaceMock creates a new instance of HTTPClientInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHTTPClientInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *HTTPClientInterfaceMock {
	mock := &HTTPClientInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// HTTPClientInterfaceMock is an autogenerated mock type for the HTTPClientInterface type
type HTTPClientInterfaceMock struct {
	mock.Mock
}

type HTTPClientInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *HTTPClientInterfaceMock) EXPECT() *HTTPClientInterfaceMock_Expecter {
	return &HTTPClientInterfaceMock_Expecter{mock: &_m.Mock}
}

// Do provides a mock function for the type HTTPClientInterfaceMock
func (_mock *HTTPClientInterfaceMock) Do(req *http.Request) (*http.Response, error) {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*http.Request) (*http.Response, error)); ok {
		return returnFunc(req)
	}
	if returnFunc, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = returnFunc(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = returnFunc(req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// HTTPClientInterfaceMock_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type HTTPClientInterfaceMock_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - req *http.Request
func (_e *HTTPClientInterfaceMock_Expecter) Do(req interface{}) *HTTPClientInterfaceMock_Do_Call {
	return &HTTPClientInterfaceMock_Do_Call{Call: _e.mock.On("Do", req)}
}

func (_c *HTTPClientInterfaceMock_Do_Call) Run(run func(req *http.Request)) *HTTPClientInterfaceMock_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *http.Request
		if args[0] != nil {
			arg0 = args[0].(*http.Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *HTTPClientInterfaceMock_Do_Call) Return(response *http.Response, err error) *HTTPClientInterfaceMock_Do_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *HTTPClientInterfaceMock_Do_Call) RunAndReturn(run func(req *http.Request) (*http.Response, error)) *HTTPClientInterfaceMock_Do_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type HTTPClientInterfaceMock
func (_mock *HTTPClientInterfaceMock) Get(url string) (*http.Response, error) {
	ret := _mock.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*http.Response, error)); ok {
		return returnFunc(url)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *http.Response); ok {
		r0 = returnFunc(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(url)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// HTTPClientInterfaceMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type HTTPClientInterfaceMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - url string
func (_e *HTTPClientInterfaceMock_Expecter) Get(url interface{}) *HTTPClientInterfaceMock_Get_Call {
	return &HTTPClientInterfaceMock_Get_Call{Call: _e.mock.On("Get", url)}
}

func (_c *HTTPClientInterfaceMock_Get_Call) Run(run func(url string)) *HTTPClientInterfaceMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *HTTPClientInterfaceMock_Get_Call) Return(response *http.Response, err error) *HTTPClientInterfaceMock_Get_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *HTTPClientInterfaceMock_Get_Call) RunAndReturn(run func(url string) (*http.Response, error)) *HTTPClientInterfaceMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Head provides a mock function for the type HTTPClientInterfaceMock
func (_mock *HTTPClientInterfaceMock) Head(url string) (*http.Response, error) {
	ret := _mock.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for Head")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*http.Response, error)); ok {
		return returnFunc(url)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *http.Response); ok {
		r0 = returnFunc(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(url)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// HTTPClientInterfaceMock_Head_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Head'
type HTTPClientInterfaceMock_Head_Call struct {
	*mock.Call
}

// Head is a helper method to define mock.On call
//   - url string
func (_e *HTTPClientInterfaceMock_Expecter) Head(url interface{}) *HTTPClientInterfaceMock_Head_Call {
	return &HTTPClientInterfaceMock_Head_Call{Call: _e.mock.On("Head", url)}
}

func (_c *HTTPClientInterfaceMock_Head_Call) Run(run func(url string)) *HTTPClientInterfaceMock_Head_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *HTTPClientInterfaceMock_Head_Call) Return(response *http.Response, err error) *HTTPClientInterfaceMock_Head_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *HTTPClientInterfaceMock_Head_Call) RunAndReturn(run func(url string) (*http.Response, error)) *HTTPClientInterfaceMock_Head_Call {
	_c.Call.Return(run)
	return _c
}

// Post provides a mock function for the type HTTPClientInterfaceMock
func (_mock *HTTPClientInterfaceMock) Post(url string, contentType string, body io.Reader) (*http.Response, error) {
	ret := _mock.Called(url, contentType, body)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, io.Reader) (*http.Response, error)); ok {
		return returnFunc(url, contentType, body)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, io.Reader) *http.Response); ok {
		r0 = returnFunc(url, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, io.Reader) error); ok {
		r1 = returnFunc(url, contentType, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// HTTPClientInterfaceMock_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type HTTPClientInterfaceMock_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - url string
//   - contentType string
//   - body io.Reader
func (_e *HTTPClientInterfaceMock_Expecter) Post(url interface{}, contentType interface{}, body interface{}) *HTTPClientInterfaceMock_Post_Call {
	return &HTTPClientInterfaceMock_Post_Call{Call: _e.mock.On("Post", url, contentType, body)}
}

func (_c *HTTPClientInterfaceMock_Post_Call) Run(run func(url string, contentType string, body io.Reader)) *HTTPClientInterfaceMock_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 io.Reader
		if args[2] != nil {
			arg2 = args[2].(io.Reader)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *HTTPClientInterfaceMock_Post_Call) Return(response *http.Response, err error) *HTTPClientInterfaceMock_Post_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *HTTPClientInterfaceMock_Post_Call) RunAndReturn(run func(url string, contentType string, body io.Reader) (*http.Response, error)) *HTTPClientInterfaceMock_Post_Call {
	_c.Call.Return(run)
	return _c
}

// PostForm provides a mock function for the type HTTPClientInterfaceMock
func (_mock *HTTPClientInterfaceMock) PostForm(url1 string, data url.Values) (*http.Response, error) {
	ret := _mock.Called(url1, data)

	if len(ret) == 0 {
		panic("no return value specified for PostForm")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, url.Values) (*http.Response, error)); ok {
		return returnFunc(url1, data)
	}
	if returnFunc, ok := ret.Get(0).(func(string, url.Values) *http.Response); ok {
		r0 = returnFunc(url1, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, url.Values) error); ok {
		r1 = returnFunc(url1, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// HTTPClientInterfaceMock_PostForm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostForm'
type HTTPClientInterfaceMock_PostForm_Call struct {
	*mock.Call
}

// PostForm is a helper method to define mock.On call
//   - url1 string
//   - data url.Values
func (_e *HTTPClientInterfaceMock_Expecter) PostForm(url1 interface{}, data interface{}) *HTTPClientInterfaceMock_PostForm_Call {
	return &HTTPClientInterfaceMock_PostForm_Call{Call: _e.mock.On("PostForm", url1, data)}
}

func (_c *HTTPClientInterfaceMock_PostForm_Call) Run(run func(url1 string, data url.Values)) *HTTPClientInterfaceMock_PostForm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 url.Values
		if args[1] != nil {
			arg1 = args[1].(url.Values)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *HTTPClientInterfaceMock_PostForm_Call) Return(response *http.Response, err error) *HTTPClientInterfaceMock_PostForm_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *HTTPClientInterfaceMock_PostForm_Call) RunAndReturn(run func(url1 string, data url.Values) (*http.Response, error)) *HTTPClientInterfaceMock_PostForm_Call {
	_c.Call.Return(run)
	return _c
}
