// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package notificationmock

import (
	"github.com/asgardeo/thunder/internal/notification/common"
	mock "github.com/stretchr/testify/mock"
)

// newNotificationStoreInterfaceMock creates a new instance of notificationStoreInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newNotificationStoreInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *notificationStoreInterfaceMock {
	mock := &notificationStoreInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// notificationStoreInterfaceMock is an autogenerated mock type for the notificationStoreInterface type
type notificationStoreInterfaceMock struct {
	mock.Mock
}

type notificationStoreInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *notificationStoreInterfaceMock) EXPECT() *notificationStoreInterfaceMock_Expecter {
	return &notificationStoreInterfaceMock_Expecter{mock: &_m.Mock}
}

// createSender provides a mock function for the type notificationStoreInterfaceMock
func (_mock *notificationStoreInterfaceMock) createSender(sender common.NotificationSenderDTO) error {
	ret := _mock.Called(sender)

	if len(ret) == 0 {
		panic("no return value specified for createSender")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(common.NotificationSenderDTO) error); ok {
		r0 = returnFunc(sender)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// notificationStoreInterfaceMock_createSender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'createSender'
type notificationStoreInterfaceMock_createSender_Call struct {
	*mock.Call
}

// createSender is a helper method to define mock.On call
//   - sender common.NotificationSenderDTO
func (_e *notificationStoreInterfaceMock_Expecter) createSender(sender interface{}) *notificationStoreInterfaceMock_createSender_Call {
	return &notificationStoreInterfaceMock_createSender_Call{Call: _e.mock.On("createSender", sender)}
}

func (_c *notificationStoreInterfaceMock_createSender_Call) Run(run func(sender common.NotificationSenderDTO)) *notificationStoreInterfaceMock_createSender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 common.NotificationSenderDTO
		if args[0] != nil {
			arg0 = args[0].(common.NotificationSenderDTO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *notificationStoreInterfaceMock_createSender_Call) Return(err error) *notificationStoreInterfaceMock_createSender_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *notificationStoreInterfaceMock_createSender_Call) RunAndReturn(run func(sender common.NotificationSenderDTO) error) *notificationStoreInterfaceMock_createSender_Call {
	_c.Call.Return(run)
	return _c
}

// deleteSender provides a mock function for the type notificationStoreInterfaceMock
func (_mock *notificationStoreInterfaceMock) deleteSender(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for deleteSender")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// notificationStoreInterfaceMock_deleteSender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'deleteSender'
type notificationStoreInterfaceMock_deleteSender_Call struct {
	*mock.Call
}

// deleteSender is a helper method to define mock.On call
//   - id string
func (_e *notificationStoreInterfaceMock_Expecter) deleteSender(id interface{}) *notificationStoreInterfaceMock_deleteSender_Call {
	return &notificationStoreInterfaceMock_deleteSender_Call{Call: _e.mock.On("deleteSender", id)}
}

func (_c *notificationStoreInterfaceMock_deleteSender_Call) Run(run func(id string)) *notificationStoreInterfaceMock_deleteSender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *notificationStoreInterfaceMock_deleteSender_Call) Return(err error) *notificationStoreInterfaceMock_deleteSender_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *notificationStoreInterfaceMock_deleteSender_Call) RunAndReturn(run func(id string) error) *notificationStoreInterfaceMock_deleteSender_Call {
	_c.Call.Return(run)
	return _c
}

// getSenderByID provides a mock function for the type notificationStoreInterfaceMock
func (_mock *notificationStoreInterfaceMock) getSenderByID(id string) (*common.NotificationSenderDTO, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for getSenderByID")
	}

	var r0 *common.NotificationSenderDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*common.NotificationSenderDTO, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *common.NotificationSenderDTO); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.NotificationSenderDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// notificationStoreInterfaceMock_getSenderByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getSenderByID'
type notificationStoreInterfaceMock_getSenderByID_Call struct {
	*mock.Call
}

// getSenderByID is a helper method to define mock.On call
//   - id string
func (_e *notificationStoreInterfaceMock_Expecter) getSenderByID(id interface{}) *notificationStoreInterfaceMock_getSenderByID_Call {
	return &notificationStoreInterfaceMock_getSenderByID_Call{Call: _e.mock.On("getSenderByID", id)}
}

func (_c *notificationStoreInterfaceMock_getSenderByID_Call) Run(run func(id string)) *notificationStoreInterfaceMock_getSenderByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *notificationStoreInterfaceMock_getSenderByID_Call) Return(notificationSenderDTO *common.NotificationSenderDTO, err error) *notificationStoreInterfaceMock_getSenderByID_Call {
	_c.Call.Return(notificationSenderDTO, err)
	return _c
}

func (_c *notificationStoreInterfaceMock_getSenderByID_Call) RunAndReturn(run func(id string) (*common.NotificationSenderDTO, error)) *notificationStoreInterfaceMock_getSenderByID_Call {
	_c.Call.Return(run)
	return _c
}

// getSenderByName provides a mock function for the type notificationStoreInterfaceMock
func (_mock *notificationStoreInterfaceMock) getSenderByName(name string) (*common.NotificationSenderDTO, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for getSenderByName")
	}

	var r0 *common.NotificationSenderDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*common.NotificationSenderDTO, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *common.NotificationSenderDTO); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.NotificationSenderDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// notificationStoreInterfaceMock_getSenderByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getSenderByName'
type notificationStoreInterfaceMock_getSenderByName_Call struct {
	*mock.Call
}

// getSenderByName is a helper method to define mock.On call
//   - name string
func (_e *notificationStoreInterfaceMock_Expecter) getSenderByName(name interface{}) *notificationStoreInterfaceMock_getSenderByName_Call {
	return &notificationStoreInterfaceMock_getSenderByName_Call{Call: _e.mock.On("getSenderByName", name)}
}

func (_c *notificationStoreInterfaceMock_getSenderByName_Call) Run(run func(name string)) *notificationStoreInterfaceMock_getSenderByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *notificationStoreInterfaceMock_getSenderByName_Call) Return(notificationSenderDTO *common.NotificationSenderDTO, err error) *notificationStoreInterfaceMock_getSenderByName_Call {
	_c.Call.Return(notificationSenderDTO, err)
	return _c
}

func (_c *notificationStoreInterfaceMock_getSenderByName_Call) RunAndReturn(run func(name string) (*common.NotificationSenderDTO, error)) *notificationStoreInterfaceMock_getSenderByName_Call {
	_c.Call.Return(run)
	return _c
}

// listSenders provides a mock function for the type notificationStoreInterfaceMock
func (_mock *notificationStoreInterfaceMock) listSenders() ([]common.NotificationSenderDTO, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for listSenders")
	}

	var r0 []common.NotificationSenderDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]common.NotificationSenderDTO, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []common.NotificationSenderDTO); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.NotificationSenderDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// notificationStoreInterfaceMock_listSenders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'listSenders'
type notificationStoreInterfaceMock_listSenders_Call struct {
	*mock.Call
}

// listSenders is a helper method to define mock.On call
func (_e *notificationStoreInterfaceMock_Expecter) listSenders() *notificationStoreInterfaceMock_listSenders_Call {
	return &notificationStoreInterfaceMock_listSenders_Call{Call: _e.mock.On("listSenders")}
}

func (_c *notificationStoreInterfaceMock_listSenders_Call) Run(run func()) *notificationStoreInterfaceMock_listSenders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *notificationStoreInterfaceMock_listSenders_Call) Return(notificationSenderDTOs []common.NotificationSenderDTO, err error) *notificationStoreInterfaceMock_listSenders_Call {
	_c.Call.Return(notificationSenderDTOs, err)
	return _c
}

func (_c *notificationStoreInterfaceMock_listSenders_Call) RunAndReturn(run func() ([]common.NotificationSenderDTO, error)) *notificationStoreInterfaceMock_listSenders_Call {
	_c.Call.Return(run)
	return _c
}

// updateSender provides a mock function for the type notificationStoreInterfaceMock
func (_mock *notificationStoreInterfaceMock) updateSender(id string, sender common.NotificationSenderDTO) error {
	ret := _mock.Called(id, sender)

	if len(ret) == 0 {
		panic("no return value specified for updateSender")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, common.NotificationSenderDTO) error); ok {
		r0 = returnFunc(id, sender)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// notificationStoreInterfaceMock_updateSender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'updateSender'
type notificationStoreInterfaceMock_updateSender_Call struct {
	*mock.Call
}

// updateSender is a helper method to define mock.On call
//   - id string
//   - sender common.NotificationSenderDTO
func (_e *notificationStoreInterfaceMock_Expecter) updateSender(id interface{}, sender interface{}) *notificationStoreInterfaceMock_updateSender_Call {
	return &notificationStoreInterfaceMock_updateSender_Call{Call: _e.mock.On("updateSender", id, sender)}
}

func (_c *notificationStoreInterfaceMock_updateSender_Call) Run(run func(id string, sender common.NotificationSenderDTO)) *notificationStoreInterfaceMock_updateSender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 common.NotificationSenderDTO
		if args[1] != nil {
			arg1 = args[1].(common.NotificationSenderDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *notificationStoreInterfaceMock_updateSender_Call) Return(err error) *notificationStoreInterfaceMock_updateSender_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *notificationStoreInterfaceMock_updateSender_Call) RunAndReturn(run func(id string, sender common.NotificationSenderDTO) error) *notificationStoreInterfaceMock_updateSender_Call {
	_c.Call.Return(run)
	return _c
}
