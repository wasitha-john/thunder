// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package notificationmock

import (
	"github.com/asgardeo/thunder/internal/notification/common"
	"github.com/asgardeo/thunder/internal/system/error/serviceerror"
	mock "github.com/stretchr/testify/mock"
)

// NewNotificationSenderMgtSvcInterfaceMock creates a new instance of NotificationSenderMgtSvcInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationSenderMgtSvcInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationSenderMgtSvcInterfaceMock {
	mock := &NotificationSenderMgtSvcInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// NotificationSenderMgtSvcInterfaceMock is an autogenerated mock type for the NotificationSenderMgtSvcInterface type
type NotificationSenderMgtSvcInterfaceMock struct {
	mock.Mock
}

type NotificationSenderMgtSvcInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationSenderMgtSvcInterfaceMock) EXPECT() *NotificationSenderMgtSvcInterfaceMock_Expecter {
	return &NotificationSenderMgtSvcInterfaceMock_Expecter{mock: &_m.Mock}
}

// CreateSender provides a mock function for the type NotificationSenderMgtSvcInterfaceMock
func (_mock *NotificationSenderMgtSvcInterfaceMock) CreateSender(sender common.NotificationSenderDTO) (*common.NotificationSenderDTO, *serviceerror.ServiceError) {
	ret := _mock.Called(sender)

	if len(ret) == 0 {
		panic("no return value specified for CreateSender")
	}

	var r0 *common.NotificationSenderDTO
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(common.NotificationSenderDTO) (*common.NotificationSenderDTO, *serviceerror.ServiceError)); ok {
		return returnFunc(sender)
	}
	if returnFunc, ok := ret.Get(0).(func(common.NotificationSenderDTO) *common.NotificationSenderDTO); ok {
		r0 = returnFunc(sender)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.NotificationSenderDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(common.NotificationSenderDTO) *serviceerror.ServiceError); ok {
		r1 = returnFunc(sender)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// NotificationSenderMgtSvcInterfaceMock_CreateSender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSender'
type NotificationSenderMgtSvcInterfaceMock_CreateSender_Call struct {
	*mock.Call
}

// CreateSender is a helper method to define mock.On call
//   - sender common.NotificationSenderDTO
func (_e *NotificationSenderMgtSvcInterfaceMock_Expecter) CreateSender(sender interface{}) *NotificationSenderMgtSvcInterfaceMock_CreateSender_Call {
	return &NotificationSenderMgtSvcInterfaceMock_CreateSender_Call{Call: _e.mock.On("CreateSender", sender)}
}

func (_c *NotificationSenderMgtSvcInterfaceMock_CreateSender_Call) Run(run func(sender common.NotificationSenderDTO)) *NotificationSenderMgtSvcInterfaceMock_CreateSender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 common.NotificationSenderDTO
		if args[0] != nil {
			arg0 = args[0].(common.NotificationSenderDTO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *NotificationSenderMgtSvcInterfaceMock_CreateSender_Call) Return(notificationSenderDTO *common.NotificationSenderDTO, serviceError *serviceerror.ServiceError) *NotificationSenderMgtSvcInterfaceMock_CreateSender_Call {
	_c.Call.Return(notificationSenderDTO, serviceError)
	return _c
}

func (_c *NotificationSenderMgtSvcInterfaceMock_CreateSender_Call) RunAndReturn(run func(sender common.NotificationSenderDTO) (*common.NotificationSenderDTO, *serviceerror.ServiceError)) *NotificationSenderMgtSvcInterfaceMock_CreateSender_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSender provides a mock function for the type NotificationSenderMgtSvcInterfaceMock
func (_mock *NotificationSenderMgtSvcInterfaceMock) DeleteSender(id string) *serviceerror.ServiceError {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSender")
	}

	var r0 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) *serviceerror.ServiceError); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serviceerror.ServiceError)
		}
	}
	return r0
}

// NotificationSenderMgtSvcInterfaceMock_DeleteSender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSender'
type NotificationSenderMgtSvcInterfaceMock_DeleteSender_Call struct {
	*mock.Call
}

// DeleteSender is a helper method to define mock.On call
//   - id string
func (_e *NotificationSenderMgtSvcInterfaceMock_Expecter) DeleteSender(id interface{}) *NotificationSenderMgtSvcInterfaceMock_DeleteSender_Call {
	return &NotificationSenderMgtSvcInterfaceMock_DeleteSender_Call{Call: _e.mock.On("DeleteSender", id)}
}

func (_c *NotificationSenderMgtSvcInterfaceMock_DeleteSender_Call) Run(run func(id string)) *NotificationSenderMgtSvcInterfaceMock_DeleteSender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *NotificationSenderMgtSvcInterfaceMock_DeleteSender_Call) Return(serviceError *serviceerror.ServiceError) *NotificationSenderMgtSvcInterfaceMock_DeleteSender_Call {
	_c.Call.Return(serviceError)
	return _c
}

func (_c *NotificationSenderMgtSvcInterfaceMock_DeleteSender_Call) RunAndReturn(run func(id string) *serviceerror.ServiceError) *NotificationSenderMgtSvcInterfaceMock_DeleteSender_Call {
	_c.Call.Return(run)
	return _c
}

// GetSender provides a mock function for the type NotificationSenderMgtSvcInterfaceMock
func (_mock *NotificationSenderMgtSvcInterfaceMock) GetSender(id string) (*common.NotificationSenderDTO, *serviceerror.ServiceError) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetSender")
	}

	var r0 *common.NotificationSenderDTO
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (*common.NotificationSenderDTO, *serviceerror.ServiceError)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *common.NotificationSenderDTO); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.NotificationSenderDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// NotificationSenderMgtSvcInterfaceMock_GetSender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSender'
type NotificationSenderMgtSvcInterfaceMock_GetSender_Call struct {
	*mock.Call
}

// GetSender is a helper method to define mock.On call
//   - id string
func (_e *NotificationSenderMgtSvcInterfaceMock_Expecter) GetSender(id interface{}) *NotificationSenderMgtSvcInterfaceMock_GetSender_Call {
	return &NotificationSenderMgtSvcInterfaceMock_GetSender_Call{Call: _e.mock.On("GetSender", id)}
}

func (_c *NotificationSenderMgtSvcInterfaceMock_GetSender_Call) Run(run func(id string)) *NotificationSenderMgtSvcInterfaceMock_GetSender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *NotificationSenderMgtSvcInterfaceMock_GetSender_Call) Return(notificationSenderDTO *common.NotificationSenderDTO, serviceError *serviceerror.ServiceError) *NotificationSenderMgtSvcInterfaceMock_GetSender_Call {
	_c.Call.Return(notificationSenderDTO, serviceError)
	return _c
}

func (_c *NotificationSenderMgtSvcInterfaceMock_GetSender_Call) RunAndReturn(run func(id string) (*common.NotificationSenderDTO, *serviceerror.ServiceError)) *NotificationSenderMgtSvcInterfaceMock_GetSender_Call {
	_c.Call.Return(run)
	return _c
}

// GetSenderByName provides a mock function for the type NotificationSenderMgtSvcInterfaceMock
func (_mock *NotificationSenderMgtSvcInterfaceMock) GetSenderByName(name string) (*common.NotificationSenderDTO, *serviceerror.ServiceError) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetSenderByName")
	}

	var r0 *common.NotificationSenderDTO
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (*common.NotificationSenderDTO, *serviceerror.ServiceError)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *common.NotificationSenderDTO); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.NotificationSenderDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// NotificationSenderMgtSvcInterfaceMock_GetSenderByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSenderByName'
type NotificationSenderMgtSvcInterfaceMock_GetSenderByName_Call struct {
	*mock.Call
}

// GetSenderByName is a helper method to define mock.On call
//   - name string
func (_e *NotificationSenderMgtSvcInterfaceMock_Expecter) GetSenderByName(name interface{}) *NotificationSenderMgtSvcInterfaceMock_GetSenderByName_Call {
	return &NotificationSenderMgtSvcInterfaceMock_GetSenderByName_Call{Call: _e.mock.On("GetSenderByName", name)}
}

func (_c *NotificationSenderMgtSvcInterfaceMock_GetSenderByName_Call) Run(run func(name string)) *NotificationSenderMgtSvcInterfaceMock_GetSenderByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *NotificationSenderMgtSvcInterfaceMock_GetSenderByName_Call) Return(notificationSenderDTO *common.NotificationSenderDTO, serviceError *serviceerror.ServiceError) *NotificationSenderMgtSvcInterfaceMock_GetSenderByName_Call {
	_c.Call.Return(notificationSenderDTO, serviceError)
	return _c
}

func (_c *NotificationSenderMgtSvcInterfaceMock_GetSenderByName_Call) RunAndReturn(run func(name string) (*common.NotificationSenderDTO, *serviceerror.ServiceError)) *NotificationSenderMgtSvcInterfaceMock_GetSenderByName_Call {
	_c.Call.Return(run)
	return _c
}

// ListSenders provides a mock function for the type NotificationSenderMgtSvcInterfaceMock
func (_mock *NotificationSenderMgtSvcInterfaceMock) ListSenders() ([]common.NotificationSenderDTO, *serviceerror.ServiceError) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListSenders")
	}

	var r0 []common.NotificationSenderDTO
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func() ([]common.NotificationSenderDTO, *serviceerror.ServiceError)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []common.NotificationSenderDTO); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.NotificationSenderDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() *serviceerror.ServiceError); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// NotificationSenderMgtSvcInterfaceMock_ListSenders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSenders'
type NotificationSenderMgtSvcInterfaceMock_ListSenders_Call struct {
	*mock.Call
}

// ListSenders is a helper method to define mock.On call
func (_e *NotificationSenderMgtSvcInterfaceMock_Expecter) ListSenders() *NotificationSenderMgtSvcInterfaceMock_ListSenders_Call {
	return &NotificationSenderMgtSvcInterfaceMock_ListSenders_Call{Call: _e.mock.On("ListSenders")}
}

func (_c *NotificationSenderMgtSvcInterfaceMock_ListSenders_Call) Run(run func()) *NotificationSenderMgtSvcInterfaceMock_ListSenders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NotificationSenderMgtSvcInterfaceMock_ListSenders_Call) Return(notificationSenderDTOs []common.NotificationSenderDTO, serviceError *serviceerror.ServiceError) *NotificationSenderMgtSvcInterfaceMock_ListSenders_Call {
	_c.Call.Return(notificationSenderDTOs, serviceError)
	return _c
}

func (_c *NotificationSenderMgtSvcInterfaceMock_ListSenders_Call) RunAndReturn(run func() ([]common.NotificationSenderDTO, *serviceerror.ServiceError)) *NotificationSenderMgtSvcInterfaceMock_ListSenders_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSender provides a mock function for the type NotificationSenderMgtSvcInterfaceMock
func (_mock *NotificationSenderMgtSvcInterfaceMock) UpdateSender(id string, sender common.NotificationSenderDTO) (*common.NotificationSenderDTO, *serviceerror.ServiceError) {
	ret := _mock.Called(id, sender)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSender")
	}

	var r0 *common.NotificationSenderDTO
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, common.NotificationSenderDTO) (*common.NotificationSenderDTO, *serviceerror.ServiceError)); ok {
		return returnFunc(id, sender)
	}
	if returnFunc, ok := ret.Get(0).(func(string, common.NotificationSenderDTO) *common.NotificationSenderDTO); ok {
		r0 = returnFunc(id, sender)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.NotificationSenderDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, common.NotificationSenderDTO) *serviceerror.ServiceError); ok {
		r1 = returnFunc(id, sender)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// NotificationSenderMgtSvcInterfaceMock_UpdateSender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSender'
type NotificationSenderMgtSvcInterfaceMock_UpdateSender_Call struct {
	*mock.Call
}

// UpdateSender is a helper method to define mock.On call
//   - id string
//   - sender common.NotificationSenderDTO
func (_e *NotificationSenderMgtSvcInterfaceMock_Expecter) UpdateSender(id interface{}, sender interface{}) *NotificationSenderMgtSvcInterfaceMock_UpdateSender_Call {
	return &NotificationSenderMgtSvcInterfaceMock_UpdateSender_Call{Call: _e.mock.On("UpdateSender", id, sender)}
}

func (_c *NotificationSenderMgtSvcInterfaceMock_UpdateSender_Call) Run(run func(id string, sender common.NotificationSenderDTO)) *NotificationSenderMgtSvcInterfaceMock_UpdateSender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 common.NotificationSenderDTO
		if args[1] != nil {
			arg1 = args[1].(common.NotificationSenderDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *NotificationSenderMgtSvcInterfaceMock_UpdateSender_Call) Return(notificationSenderDTO *common.NotificationSenderDTO, serviceError *serviceerror.ServiceError) *NotificationSenderMgtSvcInterfaceMock_UpdateSender_Call {
	_c.Call.Return(notificationSenderDTO, serviceError)
	return _c
}

func (_c *NotificationSenderMgtSvcInterfaceMock_UpdateSender_Call) RunAndReturn(run func(id string, sender common.NotificationSenderDTO) (*common.NotificationSenderDTO, *serviceerror.ServiceError)) *NotificationSenderMgtSvcInterfaceMock_UpdateSender_Call {
	_c.Call.Return(run)
	return _c
}
