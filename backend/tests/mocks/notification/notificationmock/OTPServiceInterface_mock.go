// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package notificationmock

import (
	"github.com/asgardeo/thunder/internal/notification/common"
	"github.com/asgardeo/thunder/internal/system/error/serviceerror"
	mock "github.com/stretchr/testify/mock"
)

// NewOTPServiceInterfaceMock creates a new instance of OTPServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOTPServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OTPServiceInterfaceMock {
	mock := &OTPServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// OTPServiceInterfaceMock is an autogenerated mock type for the OTPServiceInterface type
type OTPServiceInterfaceMock struct {
	mock.Mock
}

type OTPServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OTPServiceInterfaceMock) EXPECT() *OTPServiceInterfaceMock_Expecter {
	return &OTPServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// SendOTP provides a mock function for the type OTPServiceInterfaceMock
func (_mock *OTPServiceInterfaceMock) SendOTP(request common.SendOTPDTO) (*common.SendOTPResultDTO, *serviceerror.ServiceError) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for SendOTP")
	}

	var r0 *common.SendOTPResultDTO
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(common.SendOTPDTO) (*common.SendOTPResultDTO, *serviceerror.ServiceError)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(common.SendOTPDTO) *common.SendOTPResultDTO); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.SendOTPResultDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(common.SendOTPDTO) *serviceerror.ServiceError); ok {
		r1 = returnFunc(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OTPServiceInterfaceMock_SendOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendOTP'
type OTPServiceInterfaceMock_SendOTP_Call struct {
	*mock.Call
}

// SendOTP is a helper method to define mock.On call
//   - request common.SendOTPDTO
func (_e *OTPServiceInterfaceMock_Expecter) SendOTP(request interface{}) *OTPServiceInterfaceMock_SendOTP_Call {
	return &OTPServiceInterfaceMock_SendOTP_Call{Call: _e.mock.On("SendOTP", request)}
}

func (_c *OTPServiceInterfaceMock_SendOTP_Call) Run(run func(request common.SendOTPDTO)) *OTPServiceInterfaceMock_SendOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 common.SendOTPDTO
		if args[0] != nil {
			arg0 = args[0].(common.SendOTPDTO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OTPServiceInterfaceMock_SendOTP_Call) Return(sendOTPResultDTO *common.SendOTPResultDTO, serviceError *serviceerror.ServiceError) *OTPServiceInterfaceMock_SendOTP_Call {
	_c.Call.Return(sendOTPResultDTO, serviceError)
	return _c
}

func (_c *OTPServiceInterfaceMock_SendOTP_Call) RunAndReturn(run func(request common.SendOTPDTO) (*common.SendOTPResultDTO, *serviceerror.ServiceError)) *OTPServiceInterfaceMock_SendOTP_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyOTP provides a mock function for the type OTPServiceInterfaceMock
func (_mock *OTPServiceInterfaceMock) VerifyOTP(request common.VerifyOTPDTO) (*common.VerifyOTPResultDTO, *serviceerror.ServiceError) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for VerifyOTP")
	}

	var r0 *common.VerifyOTPResultDTO
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(common.VerifyOTPDTO) (*common.VerifyOTPResultDTO, *serviceerror.ServiceError)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(common.VerifyOTPDTO) *common.VerifyOTPResultDTO); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.VerifyOTPResultDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(common.VerifyOTPDTO) *serviceerror.ServiceError); ok {
		r1 = returnFunc(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OTPServiceInterfaceMock_VerifyOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyOTP'
type OTPServiceInterfaceMock_VerifyOTP_Call struct {
	*mock.Call
}

// VerifyOTP is a helper method to define mock.On call
//   - request common.VerifyOTPDTO
func (_e *OTPServiceInterfaceMock_Expecter) VerifyOTP(request interface{}) *OTPServiceInterfaceMock_VerifyOTP_Call {
	return &OTPServiceInterfaceMock_VerifyOTP_Call{Call: _e.mock.On("VerifyOTP", request)}
}

func (_c *OTPServiceInterfaceMock_VerifyOTP_Call) Run(run func(request common.VerifyOTPDTO)) *OTPServiceInterfaceMock_VerifyOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 common.VerifyOTPDTO
		if args[0] != nil {
			arg0 = args[0].(common.VerifyOTPDTO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OTPServiceInterfaceMock_VerifyOTP_Call) Return(verifyOTPResultDTO *common.VerifyOTPResultDTO, serviceError *serviceerror.ServiceError) *OTPServiceInterfaceMock_VerifyOTP_Call {
	_c.Call.Return(verifyOTPResultDTO, serviceError)
	return _c
}

func (_c *OTPServiceInterfaceMock_VerifyOTP_Call) RunAndReturn(run func(request common.VerifyOTPDTO) (*common.VerifyOTPResultDTO, *serviceerror.ServiceError)) *OTPServiceInterfaceMock_VerifyOTP_Call {
	_c.Call.Return(run)
	return _c
}
