// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package notificationmock

import (
	"github.com/asgardeo/thunder/internal/notification"
	mock "github.com/stretchr/testify/mock"
)

// NewNotificationServiceProviderInterfaceMock creates a new instance of NotificationServiceProviderInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationServiceProviderInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationServiceProviderInterfaceMock {
	mock := &NotificationServiceProviderInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// NotificationServiceProviderInterfaceMock is an autogenerated mock type for the NotificationServiceProviderInterface type
type NotificationServiceProviderInterfaceMock struct {
	mock.Mock
}

type NotificationServiceProviderInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationServiceProviderInterfaceMock) EXPECT() *NotificationServiceProviderInterfaceMock_Expecter {
	return &NotificationServiceProviderInterfaceMock_Expecter{mock: &_m.Mock}
}

// GetNotificationSenderMgtService provides a mock function for the type NotificationServiceProviderInterfaceMock
func (_mock *NotificationServiceProviderInterfaceMock) GetNotificationSenderMgtService() notification.NotificationSenderMgtSvcInterface {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationSenderMgtService")
	}

	var r0 notification.NotificationSenderMgtSvcInterface
	if returnFunc, ok := ret.Get(0).(func() notification.NotificationSenderMgtSvcInterface); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(notification.NotificationSenderMgtSvcInterface)
		}
	}
	return r0
}

// NotificationServiceProviderInterfaceMock_GetNotificationSenderMgtService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationSenderMgtService'
type NotificationServiceProviderInterfaceMock_GetNotificationSenderMgtService_Call struct {
	*mock.Call
}

// GetNotificationSenderMgtService is a helper method to define mock.On call
func (_e *NotificationServiceProviderInterfaceMock_Expecter) GetNotificationSenderMgtService() *NotificationServiceProviderInterfaceMock_GetNotificationSenderMgtService_Call {
	return &NotificationServiceProviderInterfaceMock_GetNotificationSenderMgtService_Call{Call: _e.mock.On("GetNotificationSenderMgtService")}
}

func (_c *NotificationServiceProviderInterfaceMock_GetNotificationSenderMgtService_Call) Run(run func()) *NotificationServiceProviderInterfaceMock_GetNotificationSenderMgtService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NotificationServiceProviderInterfaceMock_GetNotificationSenderMgtService_Call) Return(notificationSenderMgtSvcInterface notification.NotificationSenderMgtSvcInterface) *NotificationServiceProviderInterfaceMock_GetNotificationSenderMgtService_Call {
	_c.Call.Return(notificationSenderMgtSvcInterface)
	return _c
}

func (_c *NotificationServiceProviderInterfaceMock_GetNotificationSenderMgtService_Call) RunAndReturn(run func() notification.NotificationSenderMgtSvcInterface) *NotificationServiceProviderInterfaceMock_GetNotificationSenderMgtService_Call {
	_c.Call.Return(run)
	return _c
}

// GetOTPService provides a mock function for the type NotificationServiceProviderInterfaceMock
func (_mock *NotificationServiceProviderInterfaceMock) GetOTPService() notification.OTPServiceInterface {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOTPService")
	}

	var r0 notification.OTPServiceInterface
	if returnFunc, ok := ret.Get(0).(func() notification.OTPServiceInterface); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(notification.OTPServiceInterface)
		}
	}
	return r0
}

// NotificationServiceProviderInterfaceMock_GetOTPService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOTPService'
type NotificationServiceProviderInterfaceMock_GetOTPService_Call struct {
	*mock.Call
}

// GetOTPService is a helper method to define mock.On call
func (_e *NotificationServiceProviderInterfaceMock_Expecter) GetOTPService() *NotificationServiceProviderInterfaceMock_GetOTPService_Call {
	return &NotificationServiceProviderInterfaceMock_GetOTPService_Call{Call: _e.mock.On("GetOTPService")}
}

func (_c *NotificationServiceProviderInterfaceMock_GetOTPService_Call) Run(run func()) *NotificationServiceProviderInterfaceMock_GetOTPService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NotificationServiceProviderInterfaceMock_GetOTPService_Call) Return(oTPServiceInterface notification.OTPServiceInterface) *NotificationServiceProviderInterfaceMock_GetOTPService_Call {
	_c.Call.Return(oTPServiceInterface)
	return _c
}

func (_c *NotificationServiceProviderInterfaceMock_GetOTPService_Call) RunAndReturn(run func() notification.OTPServiceInterface) *NotificationServiceProviderInterfaceMock_GetOTPService_Call {
	_c.Call.Return(run)
	return _c
}
