// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package idpmock

import (
	"github.com/asgardeo/thunder/internal/idp"
	"github.com/asgardeo/thunder/internal/system/error/serviceerror"
	mock "github.com/stretchr/testify/mock"
)

// NewIDPServiceInterfaceMock creates a new instance of IDPServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDPServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDPServiceInterfaceMock {
	mock := &IDPServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IDPServiceInterfaceMock is an autogenerated mock type for the IDPServiceInterface type
type IDPServiceInterfaceMock struct {
	mock.Mock
}

type IDPServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *IDPServiceInterfaceMock) EXPECT() *IDPServiceInterfaceMock_Expecter {
	return &IDPServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// CreateIdentityProvider provides a mock function for the type IDPServiceInterfaceMock
func (_mock *IDPServiceInterfaceMock) CreateIdentityProvider(idp1 *idp.IDPDTO) (*idp.IDPDTO, *serviceerror.ServiceError) {
	ret := _mock.Called(idp1)

	if len(ret) == 0 {
		panic("no return value specified for CreateIdentityProvider")
	}

	var r0 *idp.IDPDTO
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(*idp.IDPDTO) (*idp.IDPDTO, *serviceerror.ServiceError)); ok {
		return returnFunc(idp1)
	}
	if returnFunc, ok := ret.Get(0).(func(*idp.IDPDTO) *idp.IDPDTO); ok {
		r0 = returnFunc(idp1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*idp.IDPDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*idp.IDPDTO) *serviceerror.ServiceError); ok {
		r1 = returnFunc(idp1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// IDPServiceInterfaceMock_CreateIdentityProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIdentityProvider'
type IDPServiceInterfaceMock_CreateIdentityProvider_Call struct {
	*mock.Call
}

// CreateIdentityProvider is a helper method to define mock.On call
//   - idp1 *idp.IDPDTO
func (_e *IDPServiceInterfaceMock_Expecter) CreateIdentityProvider(idp1 interface{}) *IDPServiceInterfaceMock_CreateIdentityProvider_Call {
	return &IDPServiceInterfaceMock_CreateIdentityProvider_Call{Call: _e.mock.On("CreateIdentityProvider", idp1)}
}

func (_c *IDPServiceInterfaceMock_CreateIdentityProvider_Call) Run(run func(idp1 *idp.IDPDTO)) *IDPServiceInterfaceMock_CreateIdentityProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *idp.IDPDTO
		if args[0] != nil {
			arg0 = args[0].(*idp.IDPDTO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *IDPServiceInterfaceMock_CreateIdentityProvider_Call) Return(iDPDTO *idp.IDPDTO, serviceError *serviceerror.ServiceError) *IDPServiceInterfaceMock_CreateIdentityProvider_Call {
	_c.Call.Return(iDPDTO, serviceError)
	return _c
}

func (_c *IDPServiceInterfaceMock_CreateIdentityProvider_Call) RunAndReturn(run func(idp1 *idp.IDPDTO) (*idp.IDPDTO, *serviceerror.ServiceError)) *IDPServiceInterfaceMock_CreateIdentityProvider_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIdentityProvider provides a mock function for the type IDPServiceInterfaceMock
func (_mock *IDPServiceInterfaceMock) DeleteIdentityProvider(idpID string) *serviceerror.ServiceError {
	ret := _mock.Called(idpID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIdentityProvider")
	}

	var r0 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) *serviceerror.ServiceError); ok {
		r0 = returnFunc(idpID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serviceerror.ServiceError)
		}
	}
	return r0
}

// IDPServiceInterfaceMock_DeleteIdentityProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIdentityProvider'
type IDPServiceInterfaceMock_DeleteIdentityProvider_Call struct {
	*mock.Call
}

// DeleteIdentityProvider is a helper method to define mock.On call
//   - idpID string
func (_e *IDPServiceInterfaceMock_Expecter) DeleteIdentityProvider(idpID interface{}) *IDPServiceInterfaceMock_DeleteIdentityProvider_Call {
	return &IDPServiceInterfaceMock_DeleteIdentityProvider_Call{Call: _e.mock.On("DeleteIdentityProvider", idpID)}
}

func (_c *IDPServiceInterfaceMock_DeleteIdentityProvider_Call) Run(run func(idpID string)) *IDPServiceInterfaceMock_DeleteIdentityProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *IDPServiceInterfaceMock_DeleteIdentityProvider_Call) Return(serviceError *serviceerror.ServiceError) *IDPServiceInterfaceMock_DeleteIdentityProvider_Call {
	_c.Call.Return(serviceError)
	return _c
}

func (_c *IDPServiceInterfaceMock_DeleteIdentityProvider_Call) RunAndReturn(run func(idpID string) *serviceerror.ServiceError) *IDPServiceInterfaceMock_DeleteIdentityProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetIdentityProvider provides a mock function for the type IDPServiceInterfaceMock
func (_mock *IDPServiceInterfaceMock) GetIdentityProvider(idpID string) (*idp.IDPDTO, *serviceerror.ServiceError) {
	ret := _mock.Called(idpID)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityProvider")
	}

	var r0 *idp.IDPDTO
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (*idp.IDPDTO, *serviceerror.ServiceError)); ok {
		return returnFunc(idpID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *idp.IDPDTO); ok {
		r0 = returnFunc(idpID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*idp.IDPDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(idpID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// IDPServiceInterfaceMock_GetIdentityProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdentityProvider'
type IDPServiceInterfaceMock_GetIdentityProvider_Call struct {
	*mock.Call
}

// GetIdentityProvider is a helper method to define mock.On call
//   - idpID string
func (_e *IDPServiceInterfaceMock_Expecter) GetIdentityProvider(idpID interface{}) *IDPServiceInterfaceMock_GetIdentityProvider_Call {
	return &IDPServiceInterfaceMock_GetIdentityProvider_Call{Call: _e.mock.On("GetIdentityProvider", idpID)}
}

func (_c *IDPServiceInterfaceMock_GetIdentityProvider_Call) Run(run func(idpID string)) *IDPServiceInterfaceMock_GetIdentityProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *IDPServiceInterfaceMock_GetIdentityProvider_Call) Return(iDPDTO *idp.IDPDTO, serviceError *serviceerror.ServiceError) *IDPServiceInterfaceMock_GetIdentityProvider_Call {
	_c.Call.Return(iDPDTO, serviceError)
	return _c
}

func (_c *IDPServiceInterfaceMock_GetIdentityProvider_Call) RunAndReturn(run func(idpID string) (*idp.IDPDTO, *serviceerror.ServiceError)) *IDPServiceInterfaceMock_GetIdentityProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetIdentityProviderByName provides a mock function for the type IDPServiceInterfaceMock
func (_mock *IDPServiceInterfaceMock) GetIdentityProviderByName(idpName string) (*idp.IDPDTO, *serviceerror.ServiceError) {
	ret := _mock.Called(idpName)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityProviderByName")
	}

	var r0 *idp.IDPDTO
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (*idp.IDPDTO, *serviceerror.ServiceError)); ok {
		return returnFunc(idpName)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *idp.IDPDTO); ok {
		r0 = returnFunc(idpName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*idp.IDPDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(idpName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// IDPServiceInterfaceMock_GetIdentityProviderByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdentityProviderByName'
type IDPServiceInterfaceMock_GetIdentityProviderByName_Call struct {
	*mock.Call
}

// GetIdentityProviderByName is a helper method to define mock.On call
//   - idpName string
func (_e *IDPServiceInterfaceMock_Expecter) GetIdentityProviderByName(idpName interface{}) *IDPServiceInterfaceMock_GetIdentityProviderByName_Call {
	return &IDPServiceInterfaceMock_GetIdentityProviderByName_Call{Call: _e.mock.On("GetIdentityProviderByName", idpName)}
}

func (_c *IDPServiceInterfaceMock_GetIdentityProviderByName_Call) Run(run func(idpName string)) *IDPServiceInterfaceMock_GetIdentityProviderByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *IDPServiceInterfaceMock_GetIdentityProviderByName_Call) Return(iDPDTO *idp.IDPDTO, serviceError *serviceerror.ServiceError) *IDPServiceInterfaceMock_GetIdentityProviderByName_Call {
	_c.Call.Return(iDPDTO, serviceError)
	return _c
}

func (_c *IDPServiceInterfaceMock_GetIdentityProviderByName_Call) RunAndReturn(run func(idpName string) (*idp.IDPDTO, *serviceerror.ServiceError)) *IDPServiceInterfaceMock_GetIdentityProviderByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetIdentityProviderList provides a mock function for the type IDPServiceInterfaceMock
func (_mock *IDPServiceInterfaceMock) GetIdentityProviderList() ([]idp.BasicIDPDTO, *serviceerror.ServiceError) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityProviderList")
	}

	var r0 []idp.BasicIDPDTO
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func() ([]idp.BasicIDPDTO, *serviceerror.ServiceError)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []idp.BasicIDPDTO); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]idp.BasicIDPDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() *serviceerror.ServiceError); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// IDPServiceInterfaceMock_GetIdentityProviderList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdentityProviderList'
type IDPServiceInterfaceMock_GetIdentityProviderList_Call struct {
	*mock.Call
}

// GetIdentityProviderList is a helper method to define mock.On call
func (_e *IDPServiceInterfaceMock_Expecter) GetIdentityProviderList() *IDPServiceInterfaceMock_GetIdentityProviderList_Call {
	return &IDPServiceInterfaceMock_GetIdentityProviderList_Call{Call: _e.mock.On("GetIdentityProviderList")}
}

func (_c *IDPServiceInterfaceMock_GetIdentityProviderList_Call) Run(run func()) *IDPServiceInterfaceMock_GetIdentityProviderList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDPServiceInterfaceMock_GetIdentityProviderList_Call) Return(basicIDPDTOs []idp.BasicIDPDTO, serviceError *serviceerror.ServiceError) *IDPServiceInterfaceMock_GetIdentityProviderList_Call {
	_c.Call.Return(basicIDPDTOs, serviceError)
	return _c
}

func (_c *IDPServiceInterfaceMock_GetIdentityProviderList_Call) RunAndReturn(run func() ([]idp.BasicIDPDTO, *serviceerror.ServiceError)) *IDPServiceInterfaceMock_GetIdentityProviderList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIdentityProvider provides a mock function for the type IDPServiceInterfaceMock
func (_mock *IDPServiceInterfaceMock) UpdateIdentityProvider(idpID string, idp1 *idp.IDPDTO) (*idp.IDPDTO, *serviceerror.ServiceError) {
	ret := _mock.Called(idpID, idp1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIdentityProvider")
	}

	var r0 *idp.IDPDTO
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, *idp.IDPDTO) (*idp.IDPDTO, *serviceerror.ServiceError)); ok {
		return returnFunc(idpID, idp1)
	}
	if returnFunc, ok := ret.Get(0).(func(string, *idp.IDPDTO) *idp.IDPDTO); ok {
		r0 = returnFunc(idpID, idp1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*idp.IDPDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, *idp.IDPDTO) *serviceerror.ServiceError); ok {
		r1 = returnFunc(idpID, idp1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// IDPServiceInterfaceMock_UpdateIdentityProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIdentityProvider'
type IDPServiceInterfaceMock_UpdateIdentityProvider_Call struct {
	*mock.Call
}

// UpdateIdentityProvider is a helper method to define mock.On call
//   - idpID string
//   - idp1 *idp.IDPDTO
func (_e *IDPServiceInterfaceMock_Expecter) UpdateIdentityProvider(idpID interface{}, idp1 interface{}) *IDPServiceInterfaceMock_UpdateIdentityProvider_Call {
	return &IDPServiceInterfaceMock_UpdateIdentityProvider_Call{Call: _e.mock.On("UpdateIdentityProvider", idpID, idp1)}
}

func (_c *IDPServiceInterfaceMock_UpdateIdentityProvider_Call) Run(run func(idpID string, idp1 *idp.IDPDTO)) *IDPServiceInterfaceMock_UpdateIdentityProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *idp.IDPDTO
		if args[1] != nil {
			arg1 = args[1].(*idp.IDPDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IDPServiceInterfaceMock_UpdateIdentityProvider_Call) Return(iDPDTO *idp.IDPDTO, serviceError *serviceerror.ServiceError) *IDPServiceInterfaceMock_UpdateIdentityProvider_Call {
	_c.Call.Return(iDPDTO, serviceError)
	return _c
}

func (_c *IDPServiceInterfaceMock_UpdateIdentityProvider_Call) RunAndReturn(run func(idpID string, idp1 *idp.IDPDTO) (*idp.IDPDTO, *serviceerror.ServiceError)) *IDPServiceInterfaceMock_UpdateIdentityProvider_Call {
	_c.Call.Return(run)
	return _c
}
