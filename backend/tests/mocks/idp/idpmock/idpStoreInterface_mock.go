// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package idpmock

import (
	"github.com/asgardeo/thunder/internal/idp"
	mock "github.com/stretchr/testify/mock"
)

// newIdpStoreInterfaceMock creates a new instance of idpStoreInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newIdpStoreInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *idpStoreInterfaceMock {
	mock := &idpStoreInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// idpStoreInterfaceMock is an autogenerated mock type for the idpStoreInterface type
type idpStoreInterfaceMock struct {
	mock.Mock
}

type idpStoreInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *idpStoreInterfaceMock) EXPECT() *idpStoreInterfaceMock_Expecter {
	return &idpStoreInterfaceMock_Expecter{mock: &_m.Mock}
}

// CreateIdentityProvider provides a mock function for the type idpStoreInterfaceMock
func (_mock *idpStoreInterfaceMock) CreateIdentityProvider(idp1 idp.IDPDTO) error {
	ret := _mock.Called(idp1)

	if len(ret) == 0 {
		panic("no return value specified for CreateIdentityProvider")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(idp.IDPDTO) error); ok {
		r0 = returnFunc(idp1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// idpStoreInterfaceMock_CreateIdentityProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIdentityProvider'
type idpStoreInterfaceMock_CreateIdentityProvider_Call struct {
	*mock.Call
}

// CreateIdentityProvider is a helper method to define mock.On call
//   - idp1 idp.IDPDTO
func (_e *idpStoreInterfaceMock_Expecter) CreateIdentityProvider(idp1 interface{}) *idpStoreInterfaceMock_CreateIdentityProvider_Call {
	return &idpStoreInterfaceMock_CreateIdentityProvider_Call{Call: _e.mock.On("CreateIdentityProvider", idp1)}
}

func (_c *idpStoreInterfaceMock_CreateIdentityProvider_Call) Run(run func(idp1 idp.IDPDTO)) *idpStoreInterfaceMock_CreateIdentityProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 idp.IDPDTO
		if args[0] != nil {
			arg0 = args[0].(idp.IDPDTO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *idpStoreInterfaceMock_CreateIdentityProvider_Call) Return(err error) *idpStoreInterfaceMock_CreateIdentityProvider_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *idpStoreInterfaceMock_CreateIdentityProvider_Call) RunAndReturn(run func(idp1 idp.IDPDTO) error) *idpStoreInterfaceMock_CreateIdentityProvider_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIdentityProvider provides a mock function for the type idpStoreInterfaceMock
func (_mock *idpStoreInterfaceMock) DeleteIdentityProvider(idpID string) error {
	ret := _mock.Called(idpID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIdentityProvider")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(idpID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// idpStoreInterfaceMock_DeleteIdentityProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIdentityProvider'
type idpStoreInterfaceMock_DeleteIdentityProvider_Call struct {
	*mock.Call
}

// DeleteIdentityProvider is a helper method to define mock.On call
//   - idpID string
func (_e *idpStoreInterfaceMock_Expecter) DeleteIdentityProvider(idpID interface{}) *idpStoreInterfaceMock_DeleteIdentityProvider_Call {
	return &idpStoreInterfaceMock_DeleteIdentityProvider_Call{Call: _e.mock.On("DeleteIdentityProvider", idpID)}
}

func (_c *idpStoreInterfaceMock_DeleteIdentityProvider_Call) Run(run func(idpID string)) *idpStoreInterfaceMock_DeleteIdentityProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *idpStoreInterfaceMock_DeleteIdentityProvider_Call) Return(err error) *idpStoreInterfaceMock_DeleteIdentityProvider_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *idpStoreInterfaceMock_DeleteIdentityProvider_Call) RunAndReturn(run func(idpID string) error) *idpStoreInterfaceMock_DeleteIdentityProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetIdentityProvider provides a mock function for the type idpStoreInterfaceMock
func (_mock *idpStoreInterfaceMock) GetIdentityProvider(idpID string) (*idp.IDPDTO, error) {
	ret := _mock.Called(idpID)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityProvider")
	}

	var r0 *idp.IDPDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*idp.IDPDTO, error)); ok {
		return returnFunc(idpID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *idp.IDPDTO); ok {
		r0 = returnFunc(idpID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*idp.IDPDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(idpID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// idpStoreInterfaceMock_GetIdentityProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdentityProvider'
type idpStoreInterfaceMock_GetIdentityProvider_Call struct {
	*mock.Call
}

// GetIdentityProvider is a helper method to define mock.On call
//   - idpID string
func (_e *idpStoreInterfaceMock_Expecter) GetIdentityProvider(idpID interface{}) *idpStoreInterfaceMock_GetIdentityProvider_Call {
	return &idpStoreInterfaceMock_GetIdentityProvider_Call{Call: _e.mock.On("GetIdentityProvider", idpID)}
}

func (_c *idpStoreInterfaceMock_GetIdentityProvider_Call) Run(run func(idpID string)) *idpStoreInterfaceMock_GetIdentityProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *idpStoreInterfaceMock_GetIdentityProvider_Call) Return(iDPDTO *idp.IDPDTO, err error) *idpStoreInterfaceMock_GetIdentityProvider_Call {
	_c.Call.Return(iDPDTO, err)
	return _c
}

func (_c *idpStoreInterfaceMock_GetIdentityProvider_Call) RunAndReturn(run func(idpID string) (*idp.IDPDTO, error)) *idpStoreInterfaceMock_GetIdentityProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetIdentityProviderByName provides a mock function for the type idpStoreInterfaceMock
func (_mock *idpStoreInterfaceMock) GetIdentityProviderByName(idpName string) (*idp.IDPDTO, error) {
	ret := _mock.Called(idpName)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityProviderByName")
	}

	var r0 *idp.IDPDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*idp.IDPDTO, error)); ok {
		return returnFunc(idpName)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *idp.IDPDTO); ok {
		r0 = returnFunc(idpName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*idp.IDPDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(idpName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// idpStoreInterfaceMock_GetIdentityProviderByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdentityProviderByName'
type idpStoreInterfaceMock_GetIdentityProviderByName_Call struct {
	*mock.Call
}

// GetIdentityProviderByName is a helper method to define mock.On call
//   - idpName string
func (_e *idpStoreInterfaceMock_Expecter) GetIdentityProviderByName(idpName interface{}) *idpStoreInterfaceMock_GetIdentityProviderByName_Call {
	return &idpStoreInterfaceMock_GetIdentityProviderByName_Call{Call: _e.mock.On("GetIdentityProviderByName", idpName)}
}

func (_c *idpStoreInterfaceMock_GetIdentityProviderByName_Call) Run(run func(idpName string)) *idpStoreInterfaceMock_GetIdentityProviderByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *idpStoreInterfaceMock_GetIdentityProviderByName_Call) Return(iDPDTO *idp.IDPDTO, err error) *idpStoreInterfaceMock_GetIdentityProviderByName_Call {
	_c.Call.Return(iDPDTO, err)
	return _c
}

func (_c *idpStoreInterfaceMock_GetIdentityProviderByName_Call) RunAndReturn(run func(idpName string) (*idp.IDPDTO, error)) *idpStoreInterfaceMock_GetIdentityProviderByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetIdentityProviderList provides a mock function for the type idpStoreInterfaceMock
func (_mock *idpStoreInterfaceMock) GetIdentityProviderList() ([]idp.BasicIDPDTO, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityProviderList")
	}

	var r0 []idp.BasicIDPDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]idp.BasicIDPDTO, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []idp.BasicIDPDTO); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]idp.BasicIDPDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// idpStoreInterfaceMock_GetIdentityProviderList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdentityProviderList'
type idpStoreInterfaceMock_GetIdentityProviderList_Call struct {
	*mock.Call
}

// GetIdentityProviderList is a helper method to define mock.On call
func (_e *idpStoreInterfaceMock_Expecter) GetIdentityProviderList() *idpStoreInterfaceMock_GetIdentityProviderList_Call {
	return &idpStoreInterfaceMock_GetIdentityProviderList_Call{Call: _e.mock.On("GetIdentityProviderList")}
}

func (_c *idpStoreInterfaceMock_GetIdentityProviderList_Call) Run(run func()) *idpStoreInterfaceMock_GetIdentityProviderList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *idpStoreInterfaceMock_GetIdentityProviderList_Call) Return(basicIDPDTOs []idp.BasicIDPDTO, err error) *idpStoreInterfaceMock_GetIdentityProviderList_Call {
	_c.Call.Return(basicIDPDTOs, err)
	return _c
}

func (_c *idpStoreInterfaceMock_GetIdentityProviderList_Call) RunAndReturn(run func() ([]idp.BasicIDPDTO, error)) *idpStoreInterfaceMock_GetIdentityProviderList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIdentityProvider provides a mock function for the type idpStoreInterfaceMock
func (_mock *idpStoreInterfaceMock) UpdateIdentityProvider(idp1 *idp.IDPDTO) error {
	ret := _mock.Called(idp1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIdentityProvider")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*idp.IDPDTO) error); ok {
		r0 = returnFunc(idp1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// idpStoreInterfaceMock_UpdateIdentityProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIdentityProvider'
type idpStoreInterfaceMock_UpdateIdentityProvider_Call struct {
	*mock.Call
}

// UpdateIdentityProvider is a helper method to define mock.On call
//   - idp1 *idp.IDPDTO
func (_e *idpStoreInterfaceMock_Expecter) UpdateIdentityProvider(idp1 interface{}) *idpStoreInterfaceMock_UpdateIdentityProvider_Call {
	return &idpStoreInterfaceMock_UpdateIdentityProvider_Call{Call: _e.mock.On("UpdateIdentityProvider", idp1)}
}

func (_c *idpStoreInterfaceMock_UpdateIdentityProvider_Call) Run(run func(idp1 *idp.IDPDTO)) *idpStoreInterfaceMock_UpdateIdentityProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *idp.IDPDTO
		if args[0] != nil {
			arg0 = args[0].(*idp.IDPDTO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *idpStoreInterfaceMock_UpdateIdentityProvider_Call) Return(err error) *idpStoreInterfaceMock_UpdateIdentityProvider_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *idpStoreInterfaceMock_UpdateIdentityProvider_Call) RunAndReturn(run func(idp1 *idp.IDPDTO) error) *idpStoreInterfaceMock_UpdateIdentityProvider_Call {
	_c.Call.Return(run)
	return _c
}
