// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usermock

import (
	"github.com/asgardeo/thunder/internal/user"
	mock "github.com/stretchr/testify/mock"
)

// newUserStoreInterfaceMock creates a new instance of userStoreInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newUserStoreInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *userStoreInterfaceMock {
	mock := &userStoreInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// userStoreInterfaceMock is an autogenerated mock type for the userStoreInterface type
type userStoreInterfaceMock struct {
	mock.Mock
}

type userStoreInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *userStoreInterfaceMock) EXPECT() *userStoreInterfaceMock_Expecter {
	return &userStoreInterfaceMock_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type userStoreInterfaceMock
func (_mock *userStoreInterfaceMock) CreateUser(user1 user.User, credentials []user.Credential) error {
	ret := _mock.Called(user1, credentials)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(user.User, []user.Credential) error); ok {
		r0 = returnFunc(user1, credentials)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// userStoreInterfaceMock_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type userStoreInterfaceMock_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user1 user.User
//   - credentials []user.Credential
func (_e *userStoreInterfaceMock_Expecter) CreateUser(user1 interface{}, credentials interface{}) *userStoreInterfaceMock_CreateUser_Call {
	return &userStoreInterfaceMock_CreateUser_Call{Call: _e.mock.On("CreateUser", user1, credentials)}
}

func (_c *userStoreInterfaceMock_CreateUser_Call) Run(run func(user1 user.User, credentials []user.Credential)) *userStoreInterfaceMock_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 user.User
		if args[0] != nil {
			arg0 = args[0].(user.User)
		}
		var arg1 []user.Credential
		if args[1] != nil {
			arg1 = args[1].([]user.Credential)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *userStoreInterfaceMock_CreateUser_Call) Return(err error) *userStoreInterfaceMock_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *userStoreInterfaceMock_CreateUser_Call) RunAndReturn(run func(user1 user.User, credentials []user.Credential) error) *userStoreInterfaceMock_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type userStoreInterfaceMock
func (_mock *userStoreInterfaceMock) DeleteUser(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// userStoreInterfaceMock_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type userStoreInterfaceMock_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - id string
func (_e *userStoreInterfaceMock_Expecter) DeleteUser(id interface{}) *userStoreInterfaceMock_DeleteUser_Call {
	return &userStoreInterfaceMock_DeleteUser_Call{Call: _e.mock.On("DeleteUser", id)}
}

func (_c *userStoreInterfaceMock_DeleteUser_Call) Run(run func(id string)) *userStoreInterfaceMock_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *userStoreInterfaceMock_DeleteUser_Call) Return(err error) *userStoreInterfaceMock_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *userStoreInterfaceMock_DeleteUser_Call) RunAndReturn(run func(id string) error) *userStoreInterfaceMock_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type userStoreInterfaceMock
func (_mock *userStoreInterfaceMock) GetUser(id string) (user.User, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (user.User, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) user.User); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(user.User)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// userStoreInterfaceMock_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type userStoreInterfaceMock_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - id string
func (_e *userStoreInterfaceMock_Expecter) GetUser(id interface{}) *userStoreInterfaceMock_GetUser_Call {
	return &userStoreInterfaceMock_GetUser_Call{Call: _e.mock.On("GetUser", id)}
}

func (_c *userStoreInterfaceMock_GetUser_Call) Run(run func(id string)) *userStoreInterfaceMock_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *userStoreInterfaceMock_GetUser_Call) Return(user1 user.User, err error) *userStoreInterfaceMock_GetUser_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *userStoreInterfaceMock_GetUser_Call) RunAndReturn(run func(id string) (user.User, error)) *userStoreInterfaceMock_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserList provides a mock function for the type userStoreInterfaceMock
func (_mock *userStoreInterfaceMock) GetUserList(limit int, offset int, filters map[string]interface{}) ([]user.User, error) {
	ret := _mock.Called(limit, offset, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetUserList")
	}

	var r0 []user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int, map[string]interface{}) ([]user.User, error)); ok {
		return returnFunc(limit, offset, filters)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int, map[string]interface{}) []user.User); ok {
		r0 = returnFunc(limit, offset, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int, map[string]interface{}) error); ok {
		r1 = returnFunc(limit, offset, filters)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// userStoreInterfaceMock_GetUserList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserList'
type userStoreInterfaceMock_GetUserList_Call struct {
	*mock.Call
}

// GetUserList is a helper method to define mock.On call
//   - limit int
//   - offset int
//   - filters map[string]interface{}
func (_e *userStoreInterfaceMock_Expecter) GetUserList(limit interface{}, offset interface{}, filters interface{}) *userStoreInterfaceMock_GetUserList_Call {
	return &userStoreInterfaceMock_GetUserList_Call{Call: _e.mock.On("GetUserList", limit, offset, filters)}
}

func (_c *userStoreInterfaceMock_GetUserList_Call) Run(run func(limit int, offset int, filters map[string]interface{})) *userStoreInterfaceMock_GetUserList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 map[string]interface{}
		if args[2] != nil {
			arg2 = args[2].(map[string]interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *userStoreInterfaceMock_GetUserList_Call) Return(users []user.User, err error) *userStoreInterfaceMock_GetUserList_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *userStoreInterfaceMock_GetUserList_Call) RunAndReturn(run func(limit int, offset int, filters map[string]interface{}) ([]user.User, error)) *userStoreInterfaceMock_GetUserList_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserListCount provides a mock function for the type userStoreInterfaceMock
func (_mock *userStoreInterfaceMock) GetUserListCount(filters map[string]interface{}) (int, error) {
	ret := _mock.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for GetUserListCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}) (int, error)); ok {
		return returnFunc(filters)
	}
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}) int); ok {
		r0 = returnFunc(filters)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = returnFunc(filters)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// userStoreInterfaceMock_GetUserListCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserListCount'
type userStoreInterfaceMock_GetUserListCount_Call struct {
	*mock.Call
}

// GetUserListCount is a helper method to define mock.On call
//   - filters map[string]interface{}
func (_e *userStoreInterfaceMock_Expecter) GetUserListCount(filters interface{}) *userStoreInterfaceMock_GetUserListCount_Call {
	return &userStoreInterfaceMock_GetUserListCount_Call{Call: _e.mock.On("GetUserListCount", filters)}
}

func (_c *userStoreInterfaceMock_GetUserListCount_Call) Run(run func(filters map[string]interface{})) *userStoreInterfaceMock_GetUserListCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]interface{}
		if args[0] != nil {
			arg0 = args[0].(map[string]interface{})
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *userStoreInterfaceMock_GetUserListCount_Call) Return(n int, err error) *userStoreInterfaceMock_GetUserListCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *userStoreInterfaceMock_GetUserListCount_Call) RunAndReturn(run func(filters map[string]interface{}) (int, error)) *userStoreInterfaceMock_GetUserListCount_Call {
	_c.Call.Return(run)
	return _c
}

// IdentifyUser provides a mock function for the type userStoreInterfaceMock
func (_mock *userStoreInterfaceMock) IdentifyUser(filters map[string]interface{}) (*string, error) {
	ret := _mock.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for IdentifyUser")
	}

	var r0 *string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}) (*string, error)); ok {
		return returnFunc(filters)
	}
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}) *string); ok {
		r0 = returnFunc(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = returnFunc(filters)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// userStoreInterfaceMock_IdentifyUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdentifyUser'
type userStoreInterfaceMock_IdentifyUser_Call struct {
	*mock.Call
}

// IdentifyUser is a helper method to define mock.On call
//   - filters map[string]interface{}
func (_e *userStoreInterfaceMock_Expecter) IdentifyUser(filters interface{}) *userStoreInterfaceMock_IdentifyUser_Call {
	return &userStoreInterfaceMock_IdentifyUser_Call{Call: _e.mock.On("IdentifyUser", filters)}
}

func (_c *userStoreInterfaceMock_IdentifyUser_Call) Run(run func(filters map[string]interface{})) *userStoreInterfaceMock_IdentifyUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]interface{}
		if args[0] != nil {
			arg0 = args[0].(map[string]interface{})
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *userStoreInterfaceMock_IdentifyUser_Call) Return(s *string, err error) *userStoreInterfaceMock_IdentifyUser_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *userStoreInterfaceMock_IdentifyUser_Call) RunAndReturn(run func(filters map[string]interface{}) (*string, error)) *userStoreInterfaceMock_IdentifyUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type userStoreInterfaceMock
func (_mock *userStoreInterfaceMock) UpdateUser(user1 *user.User) error {
	ret := _mock.Called(user1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*user.User) error); ok {
		r0 = returnFunc(user1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// userStoreInterfaceMock_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type userStoreInterfaceMock_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - user1 *user.User
func (_e *userStoreInterfaceMock_Expecter) UpdateUser(user1 interface{}) *userStoreInterfaceMock_UpdateUser_Call {
	return &userStoreInterfaceMock_UpdateUser_Call{Call: _e.mock.On("UpdateUser", user1)}
}

func (_c *userStoreInterfaceMock_UpdateUser_Call) Run(run func(user1 *user.User)) *userStoreInterfaceMock_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *user.User
		if args[0] != nil {
			arg0 = args[0].(*user.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *userStoreInterfaceMock_UpdateUser_Call) Return(err error) *userStoreInterfaceMock_UpdateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *userStoreInterfaceMock_UpdateUser_Call) RunAndReturn(run func(user1 *user.User) error) *userStoreInterfaceMock_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateUserIDs provides a mock function for the type userStoreInterfaceMock
func (_mock *userStoreInterfaceMock) ValidateUserIDs(userIDs []string) ([]string, error) {
	ret := _mock.Called(userIDs)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUserIDs")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]string) ([]string, error)); ok {
		return returnFunc(userIDs)
	}
	if returnFunc, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = returnFunc(userIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]string) error); ok {
		r1 = returnFunc(userIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// userStoreInterfaceMock_ValidateUserIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUserIDs'
type userStoreInterfaceMock_ValidateUserIDs_Call struct {
	*mock.Call
}

// ValidateUserIDs is a helper method to define mock.On call
//   - userIDs []string
func (_e *userStoreInterfaceMock_Expecter) ValidateUserIDs(userIDs interface{}) *userStoreInterfaceMock_ValidateUserIDs_Call {
	return &userStoreInterfaceMock_ValidateUserIDs_Call{Call: _e.mock.On("ValidateUserIDs", userIDs)}
}

func (_c *userStoreInterfaceMock_ValidateUserIDs_Call) Run(run func(userIDs []string)) *userStoreInterfaceMock_ValidateUserIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *userStoreInterfaceMock_ValidateUserIDs_Call) Return(strings []string, err error) *userStoreInterfaceMock_ValidateUserIDs_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *userStoreInterfaceMock_ValidateUserIDs_Call) RunAndReturn(run func(userIDs []string) ([]string, error)) *userStoreInterfaceMock_ValidateUserIDs_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyUser provides a mock function for the type userStoreInterfaceMock
func (_mock *userStoreInterfaceMock) VerifyUser(id string) (user.User, []user.Credential, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUser")
	}

	var r0 user.User
	var r1 []user.Credential
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string) (user.User, []user.Credential, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) user.User); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(user.User)
	}
	if returnFunc, ok := ret.Get(1).(func(string) []user.Credential); ok {
		r1 = returnFunc(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]user.Credential)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string) error); ok {
		r2 = returnFunc(id)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// userStoreInterfaceMock_VerifyUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyUser'
type userStoreInterfaceMock_VerifyUser_Call struct {
	*mock.Call
}

// VerifyUser is a helper method to define mock.On call
//   - id string
func (_e *userStoreInterfaceMock_Expecter) VerifyUser(id interface{}) *userStoreInterfaceMock_VerifyUser_Call {
	return &userStoreInterfaceMock_VerifyUser_Call{Call: _e.mock.On("VerifyUser", id)}
}

func (_c *userStoreInterfaceMock_VerifyUser_Call) Run(run func(id string)) *userStoreInterfaceMock_VerifyUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *userStoreInterfaceMock_VerifyUser_Call) Return(user1 user.User, credentials []user.Credential, err error) *userStoreInterfaceMock_VerifyUser_Call {
	_c.Call.Return(user1, credentials, err)
	return _c
}

func (_c *userStoreInterfaceMock_VerifyUser_Call) RunAndReturn(run func(id string) (user.User, []user.Credential, error)) *userStoreInterfaceMock_VerifyUser_Call {
	_c.Call.Return(run)
	return _c
}
